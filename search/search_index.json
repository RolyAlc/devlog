{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bienvenido a mi Lista de Ejercicio EDD/LMI","text":""},{"location":"#autor","title":"Autor","text":"AutorClase <p>Roly Alcoser Rocha</p> <p>1\u00ba de DAM</p> <p>\u00cdndice</p>"},{"location":"#entorno-de-desarrollo-edd","title":"Entorno De Desarrollo [EDD]","text":""},{"location":"#u1-desenvolupament-de-software","title":"U1. Desenvolupament de software","text":"<ul> <li> <p>Actividades  </p> </li> <li> <p>Actividad 01</p> </li> <li>Actividad 02</li> <li>Actividad 03</li> <li>Actividad 04</li> <li>Actividad 05</li> <li>Actividad 06</li> </ul>"},{"location":"#u2-eines-de-desenvolupament-entorns-integrats","title":"U2. Eines de Desenvolupament. Entorns integrats","text":""},{"location":"#u3-sistemes-de-control-de-versions","title":"U3. Sistemes de Control de Versions","text":"<ul> <li> <p>Actividades</p> </li> <li> <p>Actividad 01</p> </li> <li>Apuntes</li> </ul>"},{"location":"#u4-la-plataforma-java-eines-dautomatitzacio","title":"U4. La plataforma Java. Eines d'automatitzaci\u00f3","text":"<ul> <li> <p>Actividades</p> </li> <li> <p>Actividad 01</p> </li> <li>Actividad 02 </li> <li>Actividad 03</li> </ul>"},{"location":"#lenguaje-de-marcas-y-sistemas-lmi","title":"Lenguaje de Marcas y Sistemas [LMI]","text":""},{"location":"#u1-caracteritzacio-dels-llenguatges-de-marques","title":"U1. Caracteritzaci\u00f3 dels llenguatges de marques","text":"<ul> <li> <p>Actividades</p> </li> <li> <p>Actividad 01</p> </li> <li>Actividad 02</li> </ul>"},{"location":"#u2-utilitzacio-de-llenguatges-de-marques-en-entorns-web-html-i-css","title":"U2. Utilitzaci\u00f3 de llenguatges de marques en entorns web: HTML i CSS","text":"<ul> <li> <p>Actividades html</p> </li> <li> <p>Actividad 01</p> </li> <li>Actividad 02</li> <li>Actividad 03</li> <li>Actividad 04</li> <li>Actividad 05</li> <li>Actividad 06</li> <li>Actividad 07</li> <li>Actividad 08</li> <li>Actividad 09</li> <li>Actividad 10</li> <li>Actividad 11</li> <li> <p>Actividad 12</p> </li> <li> <p>Modificados + css</p> </li> <li> <p>Actividad 13</p> </li> <li>Actividad 14</li> <li>Actividad 15</li> </ul>"},{"location":"#u3-manipulacio-de-documents-web-javascript","title":"U3. Manipulaci\u00f3 de documents web: Javascript","text":"<ul> <li>Actividades</li> <li>WebComponentActividad1</li> <li>WebComponentActividad2</li> <li>WebComponentActividad2</li> <li>Pizza-code-js</li> </ul>"},{"location":"EDD/T1/Documento_01/","title":"Ejercicio 1","text":""},{"location":"EDD/T1/Documento_01/#buscar-els-llenguatges-mes-utilitzats-i-indicar-les-seues-caracteristiques-a-mode-de-ressum-daquest-article-podries-incloure-alguna-taula-amb-markdown","title":"Buscar els llenguatges m\u00e9s utilitzats i indicar les seues caracter\u00edstiques (a mode de ressum d'aquest article podr\u00edes incloure alguna taula amb Markdown)","text":"<p>Respuesta: </p> Lenguaje Nivel de abstracci\u00f3n Prop\u00f3sito Compilado/interpretado Paradigmas Python F\u00e1cil Permite que los desarrolladores sean m\u00e1s productivos. Interpretado imperativo, Orientado a objetos (POO) y Funcional. C++ Bajo Extender al lenguaje de programaci\u00f3n C y a\u00f1adir mecanismos que permiten la manipulaci\u00f3n de objetos. Compilado Multiparadigma: Programaci\u00f3n Estructurada, imperativo, programaci\u00f3n gen\u00e9rica Java Alto C\u00f3mo motores de procesamiento de datos que pueden trabajar con conjuntos de datos complejos y cantidades masivas de datos en tiempo real. Compilado e Interpretado Orientado a objetos, imperativo. C Dif\u00edcil Manejar todos los aspectos de las instrucciones del CPU. Compilado Paradigma imperativo, estructurado. C# F\u00e1cil Permitir la creaci\u00f3n de aplicaciones y soluciones de software s\u00f3lidas de forma f\u00e1cil. Compilado Multiparadigma: estructurado, imperativo, orientado a objetos, dirigido por eventos, funcional, gen\u00e9rico, reflexivo. <p>Tabla 01: Comparativa de los 5 tops lenguajes de programaci\u00f3n m\u00e1s utilizados.</p>"},{"location":"EDD/T1/Documento_02/","title":"Ejercicio 2","text":""},{"location":"EDD/T1/Documento_02/#article-sobre-com-plantejarieu-el-desenvolupament-duna-app-llenguatges-tecnologies-etc","title":"Article sobre com plantejarieu el desenvolupament d'una app (llenguatges, tecnologies, etc.)","text":"<p>Respuesta:</p> <p>Se utilizar\u00eda un tipo de lenguaje de programaci\u00f3n dependiendo del sistema operativo se va a desarrollar:</p> <ol> <li> <p>Planteamiento de la idea</p> <p>Nos planteariamos varias preguntas para poder determinar el concepto y las caracter\u00edsticas de la aplicaci\u00f3n. As\u00ed como a que usuario ir\u00e1, que funcionamiento tendr\u00e1, qu\u00e9 har\u00e1 exactamente la aplicaci\u00f3n, etc.</p> </li> <li> <p>Analisis del mercado y competidores</p> <p>Observariamos los posibles competidores y mirariamos que podemos mejorar para poder superar a la competencia. En esta fase, definiriamos las funcionalidades que pueda requerir la aplicaci\u00f3n como la posilibidad de tener un perfil de usurio, solicitar permisos como el uso de GPS, etc. Asi como elegir el lenguaje de programaci\u00f3n que se debe de implementar.</p> </li> <li> <p>Dise\u00f1o y delegar</p> <p>Se crear\u00eda maquetas o prototipos para poder ver como ser\u00e1 visualmente y como se comportar\u00e1 con las diferentes interacciones ante el usuario. Delegariamos diferentes funciones en base a la experiencia que tiene cada miembre del equipo que conforma el proyecto.</p> </li> <li> <p>Financiaci\u00f3n</p> <p>Buscariamos diferentes formas de financiar la aplicaci\u00f3n asi como realizar un crowdfunding para poder invertir en la aplicaci\u00f3n futura.</p> </li> <li> <p>Desarrollo</p> <p>Desarrollaremos la aplicaci\u00f3n dependiendo si es para Android o para iOs</p> <ul> <li>Lenguaje:<ul> <li>Android: Java, Kotlin</li> <li>iOs: Swift, Objective-C</li> </ul> </li> <li>Entorno de Desarrollo Integrado (IDE):<ul> <li>Android: Android Studio (IDE)</li> <li>iOs: Swift, xCode (IDE)</li> </ul> </li> </ul> </li> <li> <p>Pruebas</p> <p>Realizaremos varias pruebas antes de lanzar la aplicaci\u00f3n para poder ver posibles errores y poder solucionar sin perder tiempo y dinero.</p> </li> <li> <p>Lanzamiento</p> <p>Se presentaria un plan de Marketing para poder dar m\u00e1s visibilidad a la aplicaci\u00f3n y retener a ese p\u00fablico objetivo que sigue el proyecto.</p> <p>Se lanzar\u00eda en la tienda de aplicaciones depentiendo si se ha elegido implementar en Android o iOs.</p> </li> <li> <p>Mantenimiento y mejoras</p> <p>Una vez lanzada se corregiria los errores que puedan aparecer o a\u00f1adir nuevas funcionalidades segun las necesidades del usuario o actulizar la aplicaci\u00f3n para mantener la seguridad y dar compatilbidad a las nuevas versiones del sistema operativo.</p> </li> </ol>"},{"location":"EDD/T1/Documento_03/","title":"Ejercicio 3","text":""},{"location":"EDD/T1/Documento_03/#exemples-de-traduccio-les-ordres-python3-cc-java-i-javac","title":"Exemples de traducci\u00f3. Les ordres python3, cc, java i javac.","text":"<p>Ejemplo de traducci\u00f3n en python3:</p> <p>Respuesta:</p> <p>C\u00f3digo fuente:</p> <p>Escribimos el mensaje Hola mundo por la pantalla y lo guardaremos con la extenci\u00f3n <code>.py</code> por ejemplo <code>hola.py</code>:</p> <pre><code>print (\"Hola mundo\")\n</code></pre> <p>Interpretaci\u00f3n:</p> <p>Python es un lenguje interpretado, por lo tanto, la orden <code>python3</code> interpreta el codigo directamente.</p> <p>Para lanzar el interprete de Python, escibiremos:</p> <pre><code>$ python3 hola.py\n</code></pre> <p>Ejecuci\u00f3n:</p> <p>El c\u00f3digo se ejecuta directamente despues de ser interpretado</p> <p>Ejemplo de traducci\u00f3n en cc:</p> <p>C\u00f3digo fuente:</p> <p>Escribimos el mensaje Hola mundo por la pantalla y lo guardaremos con extenci\u00f3n <code>.c</code> como ejemplo <code>hola.c</code>:</p> <pre><code>#include &lt;stdio.h&gt;\nint main() {\n    printf(\"Hola mundo\\n\");\n    return 0;\n}\n</code></pre> <p>Compilar:</p> <p>Ejecutaremos desde la misma carpeta donde se encuntra el fichero.</p> <pre><code>cc hola.c\n</code></pre> <p>Posteriormente se crea un fichero llamado <code>a.out</code>. Es el ejecutable que contiene el c\u00f3digo m\u00e1quina traducido por el compilador, m\u00e1s tarde para ser ejecutado.</p> <p>Ejecutable:</p> <p>Para poder ejecutar utilizariamos el siguiente orden</p> <pre><code>./a.out\n</code></pre> <p>Cuando se ejecuta se mostrar\u00e1 el mismo mensaje:</p> <pre><code>Hola mundo\n</code></pre> <p>Ejemplo de traducci\u00f3n en java (Utilizando javac y java):</p> <p>C\u00f3digo fuente:</p> <p>Crearemos un fichero con la extenci\u00f3n <code>.java</code> como por ejemplo <code>Hola.java</code> y a\u00f1adiremos el c\u00f3digo para que pueda mostrar por pantalla Hola mundo.</p> <p>Este fichero no se puede ejecutar directamente</p> <p><pre><code>public class Hola {\n    public static void main(String[] args) {\n        System.out.println(\"Hola mundo\");\n    }\n}\n</code></pre> Compilar:</p> <p>Guardaremos y nos situariamos en la misma carpeta donde tenemos guardado el archivo y la lanzaremos con el siguiente orden <code>javac</code>:</p> <pre><code>javac Hola.java\n</code></pre> <p><code>javac</code>, es el compilador de Java la cual lee el codigo fuente de <code>Hola.java</code>. El compilador genera un nuevo fichero llamda Hola.class la cual no se puede ejecutar directamente si no que lo hace la m\u00e1quina virtual de Java (JVM).</p> <p>Ejecuci\u00f3n:</p> <p>La orden <code>java</code> ejecuta el fichero <code>Hola.class</code> a traves de la JVM y muestra el resultado por pantalla.</p> <pre><code>java Hola\n</code></pre> <p>Resultado:</p> <pre><code>Hola mundo\n</code></pre>"},{"location":"EDD/T1/Documento_04/","title":"Ejercicio 4","text":""},{"location":"EDD/T1/Documento_04/#lefecte-bola-de-neu","title":"L'efecte Bola de neu","text":"<p>En una empresa de desenvolupament de software s'acaba de descartar un projecte en el qual es porten mesos treballant, i amb aix\u00f2 s'han perdut diverses desenes de milers d'euros d'inversi\u00f3 i moltes hores de treball. Quan es van comen\u00e7ar els contactes amb el client, es van especificar uns requisits concrets per a l'aplicaci\u00f3, i despr\u00e9s de mesos de treball, seguint un model de desenvolupament en cascada, el client no ha quedat satisfet amb el resultat, perqu\u00e8 no \u00e9s el que esperava i ha decidit cancel\u00b7lar el contracte. Quin ha estat el problema? Com es podria haver resolt?</p> <p>Respuesta:</p> <p>El problema es la falta de comunicaci\u00f3n entre el cliente y la empresa debido a esta, el proyecto se ha canselado probacando grandes perdidas de tiempo y econ\u00f3micas.</p> <p>Una de las soluciones es entregar el trabajo en peque\u00f1as partes o demos para que pueda revisar constantemente el cliente para asegurarse de que el desarrollo se ajustar\u00e1 al cliente. De esta forma, los problemas se detectaria antes y se proceder\u00eda a corregir antes de llegar al proyecto final, evitantando retrasos y perdidas de tiempo y econ\u00f3micas.</p>"},{"location":"EDD/T1/Documento_05/","title":"Ejercicio 5","text":""},{"location":"EDD/T1/Documento_05/#la-web-duna-empresa","title":"La web d'una empresa","text":"<p>Anem a desenvolupar un projecte per a l'empresa, i hem d'organitzar el nostre equip de treball. El projecte consistir\u00e0 a crear una p\u00e0gina web per a l'empresa, amb la informaci\u00f3 necess\u00e0ria sobre els diferents departaments, a qu\u00e8 es dedica, etc\u00e8tera. En quines fases dividiries el proc\u00e9s? Quin model de desenvolupament elegiries?</p> <p>A tenir en compte:</p> <p>Per abordar amb \u00e8xit un projecte d'aquestes caracter\u00edstiques podr\u00edem adoptar qualsevol dels models evolutius. Les reunions amb els responsables de l'empresa haurien de ser freq\u00fcents, i donar-los l'oportunitat de validar tot el treball que es va fent. Caberia tant un desenvolupament iteratiu-incremental com en espiral. Les fases serien les habituals: un primer an\u00e0lisi del que es vol afegir a la web, un disseny de com volem que aquesta es veja i es comporte, una de codificaci\u00f3, i la implantaci\u00f3 i el manteniment.</p> <p>Respuesta:</p> <p>Utilizariamos el modelo de desarrollo <code>Modelo Iteratiu-Incremental</code> permitiendo interactuar con el cliente para que pueda ver y validad la parte del proyecto de la web.</p> <p>Fases:</p> <ol> <li> <p>An\u00e1lisis de los requisitos: Empezaria reuniendose con la empresa para poder enteder que informaci\u00f3n se deber\u00e1 mostara a la p\u00e1gina web y cuales son los departamentos que se destacar\u00edan, adem\u00e1s de la informaci\u00f3n que rodea la empresa. Se delagar\u00eda la responsabilidad a cada integrante del grupo que conforma realizar la web.</p> </li> <li> <p>Dise\u00f1o inicial: Se crea un prototipo sencillo con el dise\u00f1o y estructura de la web, empezando con la home-page de la web.</p> </li> <li> <p>Codificaci\u00f3n incremental x parte: Se desarrollar\u00eda la home-page y las diferentes secci\u00f3nes m\u00e1s relevantes, con la informaci\u00f3n que nos haya proporcionado la empresa.</p> </li> <li> <p>Revisi\u00f3n con la empresa x parte: Se presenta la incremental para que la empresa pueda validar y solucionar en caso de que haya alg\u00fana disconformidad.</p> </li> <li> <p>Pruebas y ajustes: Por cada incremental se realiza pruebas para asegurar que el sistema funciona correctamente cada una de las partes partiendo con los requisitos de la empresa.</p> </li> <li> <p>Implementaci\u00f3n y mantenimiento: Cuando la web esta completa se pondr\u00e1 en mantenimiento y se realizaria peque\u00f1as modificaciones o mantenimientos seg\u00fan sea conveniente.</p> </li> </ol>"},{"location":"EDD/T1/Documento_06/","title":"Ejercicio 6","text":""},{"location":"EDD/T1/Documento_06/#scrum-comflicte-dinteressos","title":"Scrum: Comflicte d'interessos","text":"<p>En una reuni\u00f3 de revisi\u00f3 de sprint hem tingut alguns problemes amb determinades tasques que no s'han dut a terme correctament o no s'han acabat a temps. En la reuni\u00f3 de planificaci\u00f3 inicial, el Scrum Master ja va sugerir que determinats equips estaven sobrecarregats de treball, per\u00f2 el Product Owner va insistir que hi havia tasques que el client esperava veure prompte fetes. Qu\u00e8 creieu que ha passat?</p> <p>Respuesta:</p> <p>Ha ocurrido un desajuste entre las expectativas y la capacidad real de trabajo del equipo. Esto ha creado un conflicto de intereses: por una parte, el Product Owner quer\u00eda cumplir con las solicitudes del cliente lo m\u00e1s r\u00e1pido posible, pero por otra, el Scrum Master hab\u00eda advertido que el equipo estaba sobrecargado y no pod\u00eda cumplir con todas las tareas en el tiempo previsto.</p> <p>Es una mala gesti\u00f3n de las prioridades y de la carga de trabajo, que no se ajust\u00f3 adecuadamente en la fase de planificaci\u00f3n del sprint.</p>"},{"location":"EDD/T3/ej1/","title":"Actividades sobre rsc y subversion","text":""},{"location":"EDD/T3/ej1/#actividad-1-desarrollo-colaborativo","title":"Actividad 1. Desarrollo colaborativo","text":"<p>Juan y Miguel son dos desarrolladores del mismo proyecto de software. Aunque cada uno trabaja unas funcionalidades concretas de una aplicaci\u00f3n, deben trabajar con el mismo c\u00f3digo fuente. \u00bfQu\u00e9 mecanismos y procedimiento crees que ser\u00eda m\u00e1s conveniente utilizar en su trabajo diario?</p> <p>Describe en un archivo en formato markdown los mecanismos que utilizar\u00edas, justificando el tipo, as\u00ed como el procedimiento detallado de las operaciones que deber\u00edan realizar cada vez que van a trabajar con el proyecto.</p> <p>Respuesta:</p> <p>Scrum</p> <p>Para abordar el desarrollo colaborativo de Juan y Miguel en el mismo proyecto de software, aplicaremos la metodolog\u00eda \u00e1gil Scrum, dado que proporciona un marco flexible y adaptable que les permitir\u00e1 trabajar de manera eficiente con un c\u00f3digo fuente compartido.</p> <p>Organizaci\u00f3n del equipo de trabajo</p> <p>En un equipo Scrum, aunque Juan y Miguel trabajan en distintas funcionalidades, deben colaborar estrechamente y autogestionarse. En este caso, ambos formar\u00e1n parte del equipo de desarrollo, que es responsable de entregar las distintas partes del producto en cada sprint.</p> <p>Dentro de este marco:</p> <ul> <li> <p>Scrum Master: Ser\u00e1 la persona que se asegure de que el marco de Scrum se aplique correctamente, eliminando cualquier obst\u00e1culo que pueda afectar a Juan y Miguel y organizando las reuniones necesarias.</p> </li> <li> <p>Product Owner: Representa al cliente y prioriza los requisitos del producto. Aunque Juan y Miguel no estar\u00e1n en contacto directo con el cliente, recibir\u00e1n del Product Owner las instrucciones claras de qu\u00e9 funcionalidades son m\u00e1s prioritarias.</p> </li> </ul> <p>Reuniones clave seg\u00fan Scrum</p> <p>Para mantener la alineaci\u00f3n entre Juan y Miguel y asegurar que el proyecto avance de manera organizada, deben participar en las siguientes reuniones:</p> <ul> <li> <p>Reuni\u00f3n de planificaci\u00f3n del sprint (Sprint Planning):</p> <p>Antes de comenzar cada sprint, se debe realizar una reuni\u00f3n de planificaci\u00f3n en la que el Product Owner explique qu\u00e9 tareas deben priorizarse en funci\u00f3n de las necesidades del cliente. Juan y Miguel seleccionar\u00e1n las tareas m\u00e1s importantes del Product Backlog, formando el Sprint Backlog, que ser\u00e1n las tareas a realizar durante las pr\u00f3ximas semanas. Esto ayuda a definir el alcance del trabajo y estimar el tiempo necesario para completar cada tarea.</p> </li> <li> <p>Scrum diario (Daily Scrum):</p> <p>Es crucial que cada d\u00eda, Juan y Miguel participen en una reuni\u00f3n breve (de unos 15 minutos) en la que se comenten tres aspectos clave: qu\u00e9 hicieron el d\u00eda anterior, qu\u00e9 planean hacer ese d\u00eda, y si han encontrado alg\u00fan problema. Esto permite mantener sincronizados a ambos desarrolladores y resolver cualquier obst\u00e1culo r\u00e1pidamente.</p> </li> <li> <p>Revisi\u00f3n del sprint (Sprint Review):</p> <p>Al finalizar cada sprint, deben presentar el trabajo realizado en una reuni\u00f3n de revisi\u00f3n, mostrando al Product Owner y al resto del equipo el progreso realizado.  Aqu\u00ed, se evaluar\u00e1 si las funcionalidades desarrolladas cumplen con los requisitos del cliente. Adem\u00e1s, se podr\u00e1n realizar demos del producto, lo que ayuda a verificar que todo funcione correctamente antes de pasar al siguiente sprint.</p> </li> <li> <p>Retrospectiva del sprint (Sprint Retrospective):</p> <p>Despu\u00e9s de la revisi\u00f3n del sprint, Juan y Miguel deben reunirse para discutir c\u00f3mo ha sido el trabajo en equipo durante el sprint. Aqu\u00ed, analizar\u00e1n qu\u00e9 aspectos han funcionado bien y cu\u00e1les se pueden mejorar. Esta reuni\u00f3n es clave para optimizar el flujo de trabajo y aplicar mejoras en el siguiente sprint.</p> </li> </ul>"},{"location":"EDD/T3/ej1/#actividad-2-control-de-versiones-y-modelo-iterativo","title":"Actividad 2. Control de versiones y modelo iterativo","text":"<p>Un equipo de desarrolladores ha decidido abordar un proyecto siguiendo un modelo de desarrollo iterativo e incremental. En la planificaci\u00f3n inicial, se ha decidido que se abordar\u00e1 en cinco fases, y cada una tendr\u00e1 como resultado una versi\u00f3n del producto con la funcionalidad correspondiente a cada iteraci\u00f3n.</p> <p>Para el desarrollo y trabajo en equipo utilizar\u00e1n el SCV Subversion.</p> <p>\u00bfQu\u00e9 estructura u organizaci\u00f3n crees que ser\u00eda m\u00e1s interesante para el equipo en el repositorio?</p> <p>Revisa los ejemplos realizados sobre Subversion, y las carpetas que este SCV sugiere que se utilicen, y redacta tu propuesta de estructura/organizaci\u00f3n en un documento en formato Markdown.</p> <p>Respuesta:</p> <p>En primer lugar, utilizaremos el servicio de SourceForge, una plataforma ampliamente utilizada para alojar y gestionar proyectos de software de c\u00f3digo abierto, que nos permitir\u00e1 crear un repositorio SVN donde centralizaremos el c\u00f3digo del proyecto y facilitaremos la colaboraci\u00f3n entre los desarrolladores.</p> <p>A continuaci\u00f3n, propondremos la siguiente estructura y organizaci\u00f3n del proyecto.</p> <p>Estructura del repositorio SVN</p> <ol> <li> <p>Raiz del repositorio</p> <p>La ra\u00edz del repositorio puede llamarse por ejemplo proyecto-versi\u00f3n. Esta ser\u00e1 la carpeta principal donde se organizar\u00e1 todo el contenido del proyecto.</p> </li> <li> <p>Subdirectorios principales</p> <p>Dentro de la ra\u00edz, se pueden crear los siguientes subdirectorios:</p> <pre><code>proyecto-versi\u00f3n/\n|-- trunk/\n|-- branches/\n|-- tags/\n</code></pre> <ul> <li> <p>trunk: Este directorio contendr\u00e1 la versi\u00f3n principal y m\u00e1s estable del c\u00f3digo.</p> </li> <li> <p>branches: En este directorio se crear\u00e1n ramas para el desarrollo de caracter\u00edsticas espec\u00edficas o para abordar tareas o bugs.</p> </li> <li> <p>tags: Este directorio se utilizar\u00e1 para almacenar versiones estables del producto en momentos espec\u00edficos.</p> </li> </ul> </li> <li> <p>Organizaci\u00f3n de las Fases del Proyecto</p> <p>Dado que el proyecto se desarrollar\u00e1 en cinco fases, se puede implementar una organizaci\u00f3n adicional dentro del directorio trunk o branches para reflejar estas fases:</p> <ul> <li> <p>Estructura en trunk/:    </p> <pre><code>proyecto-versi\u00f3n/\n|-- trunk/\n|-- |-- fase-1/\n|-- |-- fase-2/\n|-- |-- fase-3/\n|-- |-- fase-4/\n|-- |-- fase-5/\n|-- ...\n</code></pre> </li> <li> <p>Estructura en branches/:</p> <p>En lugar de a\u00f1adir todas las fases directamente en trunk, se podr\u00edan gestionar como ramas para desarrollar las funcionalidades espec\u00edficas en cada fase.</p> <pre><code>proyecto-versi\u00f3n/\n|-- branches/\n|-- |-- fase-1/\n|-- |-- fase-2/\n|-- |-- fase-3/\n|-- |-- fase-4/\n|-- |-- fase-5/\n|-- ...\n</code></pre> </li> </ul> </li> </ol>"},{"location":"EDD/T3/ej1/#actividad-3-rcs-y-svn","title":"Actividad 3. rcs y svn","text":"<p>A modo de s\u00edntesis de ambos tipos de SCV vistos, crea un documento en formato Markdown indicando las diferencias entre ellos.</p> <p>Hecho esto, c\u00e9ntrate en rcsy subversioncomenta brevemente y con tus palabras qu\u00e9 hacen las siguientes \u00f3rdenes:</p> <ul> <li>Para a rcs:<ul> <li>co</li> <li>ci</li> </ul> </li> <li>Para a svn:<ul> <li>svn co</li> <li>svn ci</li> <li>svn st</li> <li>svn add</li> <li>svn up</li> </ul> </li> </ul> <p>Si te fijas, ambos sistemas tienen las \u00f3rdenes coo ci. \u00bfHacen exactamente lo mismo en un sistema que en otro? \u00bfQu\u00e9 diferencias tienen?</p> <p>Respuesta:</p> <p>RCS (Revision Control System) y SVN (Subversion) son ambos sistemas de control de versiones  pero tienen diferentes enfoques de uso y caracter\u00edsticas. RCS es adecuado para el control de versiones a nivel de archivo en proyectos m\u00e1s peque\u00f1os, mientras que SVN es una opci\u00f3n m\u00e1s robusta y escalable dise\u00f1ada para la colaboraci\u00f3n en proyectos grandes, con caracter\u00edsticas avanzadas que facilitan el trabajo en equipo.</p> <ul> <li> <p>Para a rcs:</p> <ul> <li> <p>co (o checkout):</p> <p>Esta orden se utiliza para extraer un archivo versionado del repositorio de RCS. Al usarlo, el sistema crea una copia local del archivo en su versi\u00f3n m\u00e1s reciente. Esto permite al desarrollador trabajar en el archivo sin afectar directamente la versi\u00f3n en el repositorio hasta que decida guardar sus cambios.</p> </li> <li> <p>ci (check-in):</p> <p>La orden ci se usa para guardar los cambios realizados en un archivo de vuelta en el repositorio de RCS. Cuando se ejecuta, el sistema toma la copia local del archivo, la compara con la versi\u00f3n almacenada y, si hay diferencias, la actualiza en el repositorio.</p> </li> </ul> </li> <li> <p>Para a svn:</p> <ul> <li> <p>svn co (checkout):</p> <p>Se utiliza para extraer una copia del repositorio. Al ejecutarla, se descarga todo el contenido del directorio especificado a una carpeta local en la m\u00e1quina del usuario. Esto permite comenzar a trabajar en el proyecto con la \u00faltima versi\u00f3n de los archivos disponibles.</p> </li> <li> <p>svn ci (check-in):</p> <p>Se usa para enviar los cambios realizados en los archivos locales de nuevo al repositorio. Con esta orden, se actualiza el repositorio con las modificaciones y se debe incluir un mensaje descriptivo que explique qu\u00e9 cambios se han realizado.</p> </li> <li> <p>svn st (status):</p> <p>Esta orden se utiliza para mostrar el estado actual de los archivos en el directorio de trabajo en relaci\u00f3n con el repositorio. Indica qu\u00e9 archivos han sido modificados, a\u00f1adidos o eliminados, y si hay cambios que no han sido enviados al repositorio.</p> </li> <li> <p>svn add (add):</p> <p>Se usa para incluir nuevos archivos o directorios en el control de versiones de SVN. Despu\u00e9s de a\u00f1adir un archivo con esta orden, el archivo estar\u00e1 en el pr\u00f3ximo commit y se   rastrear\u00e1 por SVN. Es un paso crucial para asegurarse de que los nuevos archivos se integren en el proyecto.</p> </li> <li> <p>svn up (update):</p> <p>Se utiliza para actualizar el directorio de trabajo local con los cambios m\u00e1s recientes del repositorio. Esto permite al desarrollador sincronizar su copia local con la versi\u00f3n m\u00e1s reciente en el servidor, incorporando cualquier cambio realizado por otros miembros del equipo desde la \u00faltima vez que se actualiz\u00f3.</p> </li> </ul> </li> </ul>"},{"location":"EDD/T3/ejercicio/","title":"El sistema de control de versiones distribuido git","text":""},{"location":"EDD/T3/ejercicio/#ejercicio-1","title":"Ejercicio 1","text":"<p>Mentre vas realitzant els diferents passos, ves fent una xicoteta gu\u00eda en markdown del que consideres m\u00e9s important, relacionant-ho amb l'apartat de teor\u00eda.</p> <p>Anota en ella els diferents canvis que vas fent sobre el teu directori de treball.</p>"},{"location":"EDD/T3/ejercicio/#anotaciones-de-comandos","title":"Anotaciones de comandos:","text":"<ol> <li> <p>Instalaci\u00f3n/comprobaci\u00f3n de versi\u00f3n/ayuda  </p> <p><code>sudo apt update</code> <code>sudo apt install git</code> <code>git --version</code> <code>git help ordre</code></p> </li> <li> <p>Inicializar repositorio *donde estas:</p> <p><code>git init</code></p> </li> <li> <p>Configurar usuario:</p> <p><code>git config --global user.name \"Tu Nombre\"</code> <code>git config --global user.email \"email@ejemplo.com\"</code></p> </li> <li> <p>Estado:</p> <p><code>git status</code></p> </li> <li> <p>A\u00f1adir archivos:</p> <p>Preparar archivos para el commit: <code>git add &lt;file&gt;</code></p> </li> <li> <p>Eliminar archivo del repositorio y del sistema de archivos:</p> <p><code>git rm &lt;file&gt;</code></p> <p>Para quitar un archivo del control de Git sin borrarlo fisicamente: <code>git rm --cached &lt;file&gt;</code></p> </li> <li> <p>Deshacer cambios:</p> <p><code>git restore archivo.txt</code></p> <p>Elimina el archivo \u201cfile\u201d del \u00e1rea de preparaci\u00f3n (staging area), pero no afecta los cambios realizados en el archivo en tu espacio de trabajo. Es \u00fatil para deshacer un <code>git add</code> antes de hacer un commit. <code>git restore --staged &lt;file&gt;</code></p> </li> <li> <p>Guardar cambios:</p> <p><code>git commit</code></p> <p>Registra cambios en el historial: <code>git commit -m \u201cComentario\u201d</code></p> </li> <li> <p>Omitir <code>git add</code>:     Esto incluye autom\u00e1ticamente todos los archivos rastreados que hayan sido modificados (pero no nuevos). <code>git commit -a -m \"Mensaje del commit\"</code> </p> <p>Esto guarda los cambios directamente. Nota: Los archivos nuevos a\u00fan necesitan <code>git add</code>.  </p> </li> <li> <p>Consultar historial:</p> <p><code>git log</code></p> <p>De forma m\u00e1s simplificada: <code>git log --oneline</code></p> </li> <li> <p>Deshace un commit espec\u00edfico:</p> <p>Deshace un commit espec\u00edfico creando un nuevo commit que invierte sus cambios, sin alterar el historial. Es ideal para mantener el historial limpio y sin eliminar commits previos. <code>git revert &lt;id&gt;</code></p> </li> <li> <p>Eliminar archivos:</p> <p>Elimina archivos no rastreados (no versionados por Git) de tu espacio de trabajo, como archivos temporales o generados. <code>git clean</code></p> <p><code>-f</code> (force) obliga la limpieza, ya que Git no ejecuta este comando por defecto sin confirmaci\u00f3n para evitar borrados accidentales. <code>git clean -f</code></p> <p><code>-d</code>  elimina carpetas no rastreadas junto con los archivos no rastreados. <code>git clean -f -d</code></p> </li> <li> <p>Listar las ramas existentes:</p> <p>Te muestra todas las ramas disponibles en el repositorio. <code>git branch</code></p> </li> <li> <p>Crear una nueva rama:</p> <p>Crea una nueva rama con el nombre que elijas, pero no te cambia autom\u00e1ticamente a ella. <code>git branch &lt;rama&gt;</code></p> </li> <li> <p>Cambiar a otra rama:</p> <p>Cambia a la rama que indiques para trabajar en ella. <code>git checkout &lt;rama&gt;</code></p> </li> <li> <p>Eliminar una rama:</p> <p>Borra una rama que ya no necesites, pero solo si est\u00e1 completamente fusionada. <code>git branch -d &lt;rama&gt;</code></p> </li> <li> <p>Restablecer el repositorio a un commit anterior:</p> <p>Restablece todos los archivos del repositorio al estado exacto de un commit anterior. Advertencia: Los cambios posteriores no guardados pueden perderse. <code>git reset --hard &lt;id_commit&gt;</code></p> </li> </ol> <p>El archivo <code>.gitignore</code> le dice a Git qu\u00e9 archivos o carpetas no debe incluir en el control de versiones. Es \u00fatil para evitar subir datos sensibles, archivos temporales o generados autom\u00e1ticamente, como logs o configuraciones locales.</p> <p>Este archivo debe hacerse un add y un commit.</p> <p>Este archivo contiene varias l\u00edneas que seguir\u00e1n las siguientes reglas:</p> <ul> <li>Cada l\u00ednea contendr\u00e1 un patr\u00f3n.</li> <li>Se admiten l\u00edneas en blanco como separador para mejorar la legibilidad.</li> <li>Los comentarios comienzan con <code>#</code>.</li> <li>El prefijo <code>!</code> niega el patr\u00f3n (har\u00e1 que s\u00ed incluyan a git los archivos indicados).</li> <li>Podemos utilizar el comod\u00edn <code>*</code> para indicar cualquier cadena de caracteres.</li> <li>Podemos utilizar la interrogaci\u00f3n (<code>?</code>) para reemplazar a un car\u00e1cter cualquiera.</li> <li>Podemos utilizar expresiones regulares tipo <code>[0-9]</code>, <code>[ao]</code>.</li> </ul> <p>Ejemplo de fichero <code>.gitignore</code>.</p> <pre><code># Ignorar els fitxers amb nom temporal_6.txt i temporal_7.zip\ntemporal_6.txt\ntemporal_7.zip\n\n# Ignorar els fitxers amb extensi\u00f3 zip, gz, changes o deb:\n*.zip\n*.gz\n*.changes\n*.deb\n\n# Ignorar els fitxers amb extensi\u00f3 .log de la carpeta log, aix\u00ed\n# com les extensions .log0, .log1, log2...\nlog/*.log\nlog/*.log[0-9]\n\n# Ignorar tots els fitxers del directori imatges\nimatges/*\n\n# Ignorar tots els fitxers que acaben en 'a' o 'o' de la \n# carpeta compilats\ncompilats/*[ao]\n</code></pre>"},{"location":"EDD/T3/ejercicio/#ejercicio-2","title":"Ejercicio 2","text":"<p>Una vegada hages finalitzat, c\u00f2pia com a codi el resultat de l'ordre: <code>git log</code></p> <p>I adjunta al final del document tamb\u00e9 una captura de pantalla del resultat de: <code>git log --oneline</code></p> <p></p> <p></p> <p>[Recursos]</p> <p>https://joamuran.net/curs24_25/edd/ud3_scv/5.svc_git/ https://joamuran.net/curs24_25/edd/ud3_scv/6.branques/</p>"},{"location":"EDD/T4/Actividad/","title":"Activitat - Herramientas de automatizaci\u00f3n","text":"<p>Crea una classe anomenada Calculadora en un paquet format pel teu nom (per exemple com.jose.edd) amb els seg\u00fcents m\u00e8todes (funcions):</p> <ul> <li>public static int suma(int a, int b): Que suma a i b i retorna el resultat,</li> <li>public static int resta(int a, int b): Que resta a i b i retorna el resultat,</li> <li>public static int multiplica(int a, int b): Que multiplica a i b i retorna el resultat,</li> <li>public static int divideix(int a, int b): Que divideix a entre b i retorna el resultat. Si b \u00e9s 0, mostra l'error i torna un 0.</li> </ul> <p>I una altra classe que a la funci\u00f3 principal fa\u00e7a \u00fas d'aquestes funcions, i mostre els resultats per pantalla.</p> <p>Crea el directori build, i fes \u00fas d'aquest com a classpath.</p> <p>Indica a un fitxer Markdown el proc\u00e9s que has seguit, incloent el codi font, les ordres per compilar i per executar, i l'estructura de carpetes resultant. Fes una breu explicaci\u00f3 de cada cosa.</p>"},{"location":"EDD/T4/Actividad/#herramientas-de-automatizacion-java-javac","title":"Herramientas de automatizaci\u00f3n - java, javac","text":""},{"location":"EDD/T4/Actividad/#crear-fichero-y-comprobar-la-estructura-de-carpetas","title":"Crear fichero y comprobar la estructura de carpetas","text":"<pre><code>mkdir -p saludaBase/src/com/roly/edd\ntree saludaBase/\n</code></pre>"},{"location":"EDD/T4/Actividad/#archivos-java","title":"Archivos java","text":"<p>Creamos dos ficheros, uno el programa y otro aquel que maneja la interacci\u00f3n con el usuario y utiliza la l\u00f3gica definida por el otro fichero java.</p> <p></p> <p>Archivos javas:</p> <ul> <li> <p>Calculadora.java</p> <ul> <li>Contiene m\u00e9todos est\u00e1ticos para realizar las operaciones matem\u00e1ticas (sumar, restar, multiplicar, dividir).  </li> <li>Proporciona m\u00e9todos reutilizables que realizan c\u00e1lculos.  </li> <li>C\u00f3digo:  </li> </ul> </li> </ul> <pre><code>package com.roly.edd;\n\npublic class Calculadora {\n    public static int sumar(int a, int b) {\n        return a + b;\n    }\n\n    public static int restar(int a, int b) {\n        return a - b;\n    }\n\n    public static int multiplicar(int a, int b) {\n        return a * b;\n    }\n\n    public static double dividir(int a, int b) {\n        if (b == 0) throw new ArithmeticException(\"No se puede dividir por 0\");\n        return (double) a / b;\n    }\n}\n</code></pre> <ul> <li> <p>EjecutarCal.java:</p> <ul> <li>Gestiona la interacci\u00f3n con el usuario: solicita datos, recibe el operador, y utiliza los m\u00e9todos de <code>Calculadora</code> para realizar c\u00e1lculos, mostrando los resultados.</li> <li>C\u00f3digo:</li> </ul> </li> </ul> <pre><code>package com.roly.edd;\n\nimport java.util.InputMismatchException;\nimport java.util.Scanner;\n\npublic class EjecutarCal {\n    static Scanner teclat = new Scanner(System.in);\n\n    public static void main(String[] args) {\n        try {\n            System.out.println(\"Dime dos valores: \");\n            int a = teclat.nextInt();\n            int b = teclat.nextInt();\n            teclat.nextLine();\n\n            System.out.println(\"Dime un operador (+, -, *, /): \");\n            char operador = teclat.nextLine().charAt(0);\n\n            switch (operador) {\n                case '+':\n                    System.out.println(\"Suma: \" + a + \" + \" + b + \" = \" + Calculadora.sumar(a, b));\n                    break;\n                case '-':\n                    System.out.println(\"Resta: \" + a + \" - \" + b + \" = \" + Calculadora.restar(a, b));\n                    break;\n                case '*':\n                    System.out.println(\"Multiplicaci\u00f3n: \" + a + \" * \" + b + \" = \" + Calculadora.multiplicar(a, b));\n                    break;\n                case '/':\n                    System.out.println(\"Divisi\u00f3n: \" + a + \" / \" + b + \" = \" + Calculadora.dividir(a, b));\n                    break;\n                default:\n                    System.out.println(\"Operador no v\u00e1lido\");\n            }\n        } catch (InputMismatchException e) {\n            System.out.println(\"Error en la entrada de datos\");\n        } catch (ArithmeticException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}\n</code></pre>"},{"location":"EDD/T4/Actividad/#compilar-java","title":"Compilar java","text":"<p>Ejecutaremos javac para compilar el c\u00f3digo fuente Java y generar los archivos <code>.class</code>, que contiene el bytecode, la cual es el formato para que la m\u00e1quina (JVM) pueda entender y ejecutar. Nos situaremos en un directorio m\u00e1s arriba, como en <code>saludaBase/src</code>.</p> <pre><code>javac com/roly/edd/Calculadora.java\njavac com/roly/edd/EjecutarCal.java\ntree\n</code></pre> <p></p>"},{"location":"EDD/T4/Actividad/#ejecucion-del-programa","title":"Ejecuci\u00f3n del programa","text":"<ul> <li>La JVM carga el archivo <code>EjecutarCal.class</code> desde la estructura de paquetes <code>com.roly.edd.xxx</code>.</li> <li>Interpreta el bytecode y comienza la ejecuci\u00f3n desde el m\u00e9todo <code>main</code> del archivo <code>EjecutarCal.java</code>.</li> </ul> <ul> <li>El programa interact\u00faa con el usuario seg\u00fan lo definido en el c\u00f3digo fuente.</li> </ul> <p>Ejemplo de ejecuci\u00f3n del c\u00f3digo.</p> <pre><code>java com.roly.edd.Ejecutar.Cal\n</code></pre> <p></p>"},{"location":"EDD/T4/Actividad/#classpath-y-destino-de-la-compilacion","title":"Classpath y destino de la compilaci\u00f3n","text":""},{"location":"EDD/T4/Actividad/#crear-directorio-build","title":"Crear directorio \u201cbuild\u201d","text":"<p>Crearemos la carpeta \u201cbuild\u201d y comprobaremos la estructura del directorio.</p> <p></p>"},{"location":"EDD/T4/Actividad/#compilacion-dirigida-con-estructura","title":"Compilaci\u00f3n dirigida con estructura","text":"<pre><code>javac -d build/ src/com/roly/edd/Calculadora.java\n</code></pre> <p>El comando compila el c\u00f3digo fuente ubicado en \u201csrc/com/roly/edd/Calculadora.java\u201d y genera el archivo \u201c.class\u201d (bytecode) en una carpeta espec\u00edfica (build/). Esto hace que la estructura del paquete (com/alumno/edd) se replique autom\u00e1ticamente dentro de la carpeta build.</p> <ul> <li>La opci\u00f3n -d especifica el directorio de salida donde se colocar\u00e1n los archivos compilados .class</li> </ul> <p>Ejecuci\u00f3n del comando y comprobar la estructura</p> <p></p>"},{"location":"EDD/T4/Actividad/#compilacion-con-dependencias","title":"Compilaci\u00f3n con dependencias","text":"<pre><code>javac -d build -classpath build src/com/roly/edd/EjecutarCal.java\n</code></pre> <p>El comando compila el archivo <code>EjecutarCal.java</code> desde la carpeta <code>src/com/roly/edd/</code> y coloca su archivo <code>.class</code> en la carpeta build.</p> <ul> <li>La opci\u00f3n <code>-classpath build</code> le indica al compilador d\u00f3nde buscar las clases ya compiladas (como <code>Calculadora.class</code>), necesarias para que el programa funcione.</li> </ul> <p></p>"},{"location":"EDD/T4/Actividad/#estructura-completa","title":"Estructura completa","text":"<pre><code>tree saludaBase/\n</code></pre>"},{"location":"EDD/T4/Actividad/#ejecutar-codigo","title":"Ejecutar c\u00f3digo","text":"<pre><code>java -cp build/ com.roly.edd.EjecutarCal\n</code></pre> <p>Ejecutamos el programa Java especificando en la clase <code>EjecutarCal</code>, situada en el paquete <code>com.roly.edd</code>.</p> <ul> <li><code>-cp (o --class-path)</code> indica el directorio donde la JVM debe buscar las clases compiladas. En este caso, build/ es el directorio donde se encuentran los archivos .class generados por javac.</li> </ul> <p></p>"},{"location":"EDD/T4/Ant/","title":"Ant. Crea el projecte ant amb els fonts de la calculadora i el build.xml correctament, amb els targets clean, compile i run.","text":"<ol> <li>Crear el archivo build.xml</li> </ol> <p>El fichero <code>build.xml</code> permitir\u00e1 automatizar las siguientes tareas:</p> <ul> <li>clean: elimina los archivos generados anteriormente.</li> <li>compile: compila los archivos <code>.java</code> y genera los <code>.class</code>.</li> <li>run: ejecuta el programa principal <code>EjecutarCal</code>.</li> </ul> <p>C\u00f3digo del archivo <code>build.xml</code>:</p> <pre><code>&lt;project name=\"Caculadora\"&gt;\n    &lt;target name=\"clean\"&gt;\n        &lt;delete dir=\"build\" /&gt;\n    &lt;/target&gt;\n\n    &lt;target name=\"compile\" depends=\"clean\"&gt;\n        &lt;mkdir dir=\"build\" /&gt;\n        &lt;javac includeantruntime=\"false\" \n        srcdir=\"src/com/roly/edd\" destdir=\"build\" /&gt;\n    &lt;/target&gt;\n\n    &lt;target name=\"run\" depends=\"compile\"&gt;\n        &lt;property name=\"arg0\" value=\"\"/&gt;\n        &lt;java classpath=\"build\" classname=\"com.roly.edd.EjecutarCal\"&gt;\n                &lt;arg value=\"${arg0}\"/&gt;\n        &lt;/java&gt;\n    &lt;/target&gt;\n&lt;/project&gt;\n</code></pre> <p></p> <ol> <li>Crear la estructura de carpetas</li> </ol> <p>Organizamos seg\u00fan las pr\u00e1cticas anteriores</p> <p></p> <ol> <li>Ejecutamos los comandos ant</li> </ol> <p>ant clean</p> <p>Elimina los archivos generados previamente.</p> <p></p> <p>ant compile</p> <p>Compila el proyecto y genera los archivos <code>.class</code> en la carpeta <code>build</code>.</p> <p></p> <p>ant run</p> <p>Inicia el programa y solicita los valores y el operador.</p> <p></p>"},{"location":"EDD/T4/Maven/","title":"Maven","text":""},{"location":"EDD/T4/Maven/#maven-act-1-configura-el-projecte-correctament-des-de-la-linia-dordres-partint-del-larquetip-quickstart","title":"Maven Act 1. Configura el projecte correctament des de la l\u00ednia d'ordres, partint del l'arquetip quickstart.","text":"<ol> <li>Crear un nuevo proyecto Maven usando el arquetipo quickstart</li> </ol> <p>Ejecutar con el siguiente comando para crear un nuevo proyecto Maven con el arquetipo <code>quickstart</code>:</p> <p><pre><code>mvn archetype:generate -DgroupId=com.roly.edd -DartifactId=calculadora -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false\n</code></pre> </p> <p>Este comando generar\u00e1 la estructura b\u00e1sica de un proyecto Maven en la carpeta calculadora, con una estructura predeterminada de directorios y archivos.</p> <ol> <li>Estructura generada por Maven</li> </ol> <p>Despu\u00e9s de ejecutar el comando, Maven generar\u00e1 una estructura de directorios como esta:</p> <p></p> <ol> <li>Implementar las clases de la Calculadora</li> </ol> <p>Copiamos los archivos <code>Calculadora</code> y <code>EjecutarCal</code> en la carpeta main de los archivos que se ha generado Maven.</p> <p></p> <ol> <li>Configurar el archivo pom.xml Abrimos y editamos el archivo <code>pom.xml</code> para configurar las dependencias y los plugins necesarios.</li> </ol> <p></p> <ol> <li>Ejecutar los comandos Maven</li> </ol> <p>Compilar el proyecto: Una vez configurado el archivo <code>pom.xml</code> y a\u00f1adidas las clases necesarias, ejecutamos el siguiente comando para compilar el proyecto: <code>mvn clean compile</code></p> <p></p> <p>Este comando compilar\u00e1 el c\u00f3digo y generar\u00e1 la estructura necesaria en la carpeta target.</p> <p></p> <ol> <li>Ejecutar el programa Para ejecutar el programa despu\u00e9s de compilarlo, podemos hacerlo directamente con el siguiente comando:</li> </ol> <p><code>java -cp target/classes com.roly.edd.EjecutarCal</code></p> <p></p> <p>Este comando ejecuta la clase principal <code>EjecutarCal</code> que contiene el m\u00e9todo <code>main()</code>, utilizando la carpeta <code>target/classes</code> como el <code>classpath</code>.</p>"},{"location":"EDD/T4/Maven/#maven-act-2-genera-el-projecte-correctament-des-de-vscde","title":"Maven Act 2. Genera el projecte correctament des de VSCde.","text":"<ol> <li>Buscamos la ventana en VSC donde aparezca \"MAVEN\" y daremos click al simbolo \"+\" para crear un proyecto Maven nuevo:</li> </ol> <ol> <li>En la paleta de \u00f3rdenes nos aparecer\u00e1n los diferentes arquetipos de los que disponemos. Busque quickstart, y seleccione <code>maven-Archetype-quickstart</code>.</li> </ol> <ol> <li> <p>Indique la versi\u00f3n (1.0), el groupId (com.roly.edd), y el nom (calculadoravsc) del proyecto.</p> </li> <li> <p>Adem\u00e1s, si usas el terminal integrado de VSCode, nos mostrar\u00e1 la versi\u00f3n propietaria que falta por configurar. Dejamos el valor predeterminado <code>1.0-SNAPSHOT</code>, y pulsamos Intro para crear el proyecto:</p> </li> </ol> <p></p> <ol> <li>Una vez generado el proyecto, si echamos un vistazo a la estructura de carpetas generada y al pom.xml , veremos que es pr\u00e1cticamente igual a la que definimos en la consola.</li> </ol> <p></p> <ol> <li>A\u00f1adimos los arvhicos y modificamos el pom.xml. Posteriormente ejecutamos maven.</li> </ol> <p></p> <ol> <li>Ejecutamos el programa.</li> </ol> <p></p>"},{"location":"EDD/T4/Maven/#maven-act-3-genera-el-projecte-correctament-des-dun-altre-ide-a-la-seua-seleccio","title":"Maven Act 3. Genera el projecte correctament des d'un altre IDE a la seua selecci\u00f3.","text":"<ol> <li> <p>Creamos entorno maven en Netbens</p> <p></p> <p></p> </li> <li> <p>Modificar estructura maven por defecto.</p> <p>A\u00f1adiremos los archivos java de calculadora.java y EjectuarCal.java y modificaramos el archivo pom.xml. </p> <p></p> </li> <li> <p>Descargaremos las dependencias que estan incluidas del pom.xml</p> <p></p> </li> <li> <p>Ejecutaremos maven dandole click derecho y seleccionando <code>Clean and Build</code> para que pueda crear en base al archivo pom.xml.</p> <p></p> <p></p> <p>Se puede observar como se crear una carpeta llamada target</p> </li> <li> <p>Ejecutaremos el programa</p> <p></p> <p></p> </li> </ol>"},{"location":"EDD/T4/Act-Gradle/act-gradle/","title":"Pr\u00e1ctica: Calculadora en Gradle","text":""},{"location":"EDD/T4/Act-Gradle/act-gradle/#configuracion-inicial","title":"Configuraci\u00f3n inicial","text":""},{"location":"EDD/T4/Act-Gradle/act-gradle/#crear-la-estructura-del-proyecto","title":"Crear la estructura del proyecto","text":"<ul> <li>Crea una carpeta para el proyecto y usa el comando <code>gradle init</code> para inicializarlo:</li> </ul> <pre><code>gradle init\n</code></pre> <ul> <li>La estructura inicial de Gradle tendr\u00e1 este aspecto:</li> </ul> <pre><code>tree\n</code></pre>"},{"location":"EDD/T4/Act-Gradle/act-gradle/#organizar-el-proyecto","title":"Organizar el proyecto","text":"<ul> <li>Crea carpetas personalizadas para organizar los archivos Java:</li> </ul> <pre><code>mkdir -p app/src/main/java/com/roly/edd/calcgradle\nmkdir -p app/src/test/java/com/roly/edd/calcgradle\n</code></pre> <ul> <li>Mueve los archivos generados por Gradle a las nuevas carpetas:</li> </ul> <pre><code>mv app/src/main/java/org/example/App.java app/src/main/java/com/roly/edd/calcgradle/\nmv app/src/test/java/org/example/AppTest.java app/src/test/java/com/roly/edd/calcgradle/\n</code></pre> <ul> <li>Elimina las carpetas sobrantes:</li> </ul> <pre><code>rm -r app/src/main/java/org\nrm -r app/src/test/java/org\n</code></pre>"},{"location":"EDD/T4/Act-Gradle/act-gradle/#anadir-archivos-personalizados","title":"A\u00f1adir archivos personalizados","text":"<ul> <li>Agrega tus archivos Java a la carpeta <code>calcgradle</code>:</li> <li><code>Calculadora.java</code>: Implementa las operaciones b\u00e1sicas.</li> <li><code>EjecutarCal.java</code>: Contiene el punto de entrada (<code>main</code>).</li> </ul>"},{"location":"EDD/T4/Act-Gradle/act-gradle/#ajustar-configuraciones-en-buildgradle","title":"Ajustar configuraciones en <code>build.gradle</code>","text":"<ul> <li>Modifica la configuraci\u00f3n para incluir la clase principal:</li> </ul> <pre><code>application {\n    mainClass = 'com.roly.edd.calcgradle.EjecutarCal'\n}\n</code></pre> <ul> <li>Aseg\u00farate de que el <code>package</code> de cada archivo Java sea correcto:</li> </ul> <pre><code>package com.roly.edd.calcgradle\n</code></pre>"},{"location":"EDD/T4/Act-Gradle/act-gradle/#agregar-pruebas","title":"Agregar pruebas","text":""},{"location":"EDD/T4/Act-Gradle/act-gradle/#archivo-de-pruebas","title":"Archivo de pruebas","text":"<ul> <li>Crea un archivo de prueba dentro de <code>app/src/test/java/com/roly/edd/calcgradle</code>, por ejemplo, <code>AppTest.java</code>, para validar las funcionalidades.</li> </ul>"},{"location":"EDD/T4/Act-Gradle/act-gradle/#configurar-pruebas-en-buildgradle","title":"Configurar pruebas en <code>build.gradle</code>","text":"<ul> <li>Aseg\u00farate de que las dependencias para pruebas est\u00e9n definidas:</li> </ul> <pre><code>dependencies {\n    testImplementation 'org.junit.jupiter:junit-jupiter-api'\n    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'\n}\n</code></pre> <ul> <li>Configura el uso de JUnit:</li> </ul> <pre><code>tasks.named('test') {\n    useJUnitPlatform()\n}\n</code></pre>"},{"location":"EDD/T4/Act-Gradle/act-gradle/#sin-pruebas","title":"Sin pruebas","text":""},{"location":"EDD/T4/Act-Gradle/act-gradle/#si-no-se-usan-pruebas","title":"Si no se usan pruebas","text":"<ul> <li>Elimina los archivos de prueba o las rutas correspondientes de <code>dependencies</code>:</li> </ul> <pre><code>dependencies {\n    // testImplementation 'org.junit.jupiter:junit-jupiter-api'\n    // testRuntimeOnly 'org.junit.platform:junit-platform-launcher'\n}\n</code></pre> <ul> <li>Desactiva las pruebas en <code>build.gradle</code>:</li> </ul> <pre><code>tasks.named('test') {\n    enabled = false\n}\n</code></pre>"},{"location":"EDD/T4/Act-Gradle/act-gradle/#habilitar-entrada-por-terminal","title":"Habilitar entrada por terminal","text":"<ul> <li>Gradle no permite entradas por terminal de forma predeterminada. Agrega esta l\u00ednea en el fichero <code>build.gradle</code>:</li> </ul> <pre><code>tasks.named('run') {\n    standardInput = System.in\n}\n</code></pre>"},{"location":"EDD/T4/Act-Gradle/act-gradle/#ejecutar-el-proyecto","title":"Ejecutar el proyecto","text":""},{"location":"EDD/T4/Act-Gradle/act-gradle/#preparar-construir-y-ejecutar","title":"Preparar, construir y ejecutar","text":"<ul> <li>Ejecuta los siguientes comandos en orden:</li> </ul> <pre><code>gradle clean\ngradle build\n</code></pre> <pre><code>gradle run\ngradle test\n</code></pre>"},{"location":"LMI/T1/Documento_01/","title":"Ejercicio 1","text":""},{"location":"LMI/T1/Documento_01/#identificar-caracteristiques-dels-llenguatges-de-marques-en-diferents-documents-svg-html-xml","title":"Identificar caracter\u00edstiques dels llenguatges de marques en diferents documents (svg, html, xml...)","text":""},{"location":"LMI/T1/Documento_01/#ejemplo-de-svg","title":"Ejemplo de svg","text":"<p>Respuesta:</p> <pre><code>&lt;svg\nwidth=\"198mm\"\nheight=\"166mm\"\nviewBox=\"0 0 198 166\"\nversion=\"1.1\"\nxmlns=\"http://www.w3.org/2000/svg\"&gt;\n&lt;g transform=\"matrix(2.2373964,0,0,2.2374086,-1351.9834,-2209.4334)\"&gt;\n    &lt;path\n    style=\"fill:#fb9c08\"\n    d=\"m 647.75482,988.4343 -14.19848,24.169 h 6e-5 l -6.8e-4,17.3938 h -10.21745 l -18.15292,30.901 h -10e-5 l 42.56957,10e-5 z\" /&gt;\n    &lt;path\n    style=\"fill:#653097\"\n    d=\"m 623.33811,1012.6033 v 17.3938 l 10.21823,-17.3938 z\" /&gt;\n    &lt;path\n    style=\"fill:#653097\"\n    d=\"m 663.88003,1012.6033 v 17.3938 h 10.21813 l 18.15101,30.9009 h -42.5676 v -72.4637 z\" /&gt;\n    &lt;path\n    style=\"fill:#fb9c08\"\n    d=\"m 674.0981,1012.6033 v 17.3938 l -10.21825,-17.3938 z\" /&gt;\n&lt;/g&gt;\n&lt;/svg&gt;\n</code></pre>"},{"location":"LMI/T1/Documento_01/#podemos-observar-que-utiliza-las-siguientes-etiquetas","title":"Podemos observar que utiliza las siguientes etiquetas.","text":"<p><code>&lt;svg&gt;</code> es un lenguaje basado en XML-para describir im\u00e1genes vectoriales. <code>&lt;g&gt;</code> agrupa un conjunto de elementos SVG. <code>&lt;path&gt;</code> se utiliza para definir formas complejas mediante un conjunto de comandos de dibujo.</p>"},{"location":"LMI/T1/Documento_01/#ejemplo-de-html","title":"Ejemplo de html","text":""},{"location":"LMI/T1/Documento_01/#podemos-observar-que-utiliza-las-siguientes-etiquetas-segun-esta-la-estructura-pero-que-puede-haber-mas-etiquetas","title":"Podemos observar que utiliza las siguientes etiquetas seg\u00fan esta la estructura pero que puede haber m\u00e1s etiquetas.","text":"<pre><code>&lt;!DOCTYPE html&gt;\n    &lt;html&gt;\n    &lt;head&gt;\n        &lt;meta&gt;\n        &lt;title&gt;\n    &lt;body&gt;\n        &lt;h1&gt;\n        &lt;p&gt;\n        &lt;ul&gt;\n            &lt;li&gt;\n                &lt;b&gt;\n</code></pre>"},{"location":"LMI/T1/Documento_01/#ejemplo-de-xml","title":"Ejemplo de xml","text":""},{"location":"LMI/T1/Documento_01/#podemos-observar-que-utiliza-las-siguientes-etiquetas-segun-esta-su-estructura","title":"Podemos observar que utiliza las siguientes etiquetas seg\u00fan esta su estructura.","text":"<pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;manifest&gt;\n    &lt;uses-permission&gt;\n    &lt;application&gt;\n    &lt;activity&gt;\n    &lt;intent-filter&gt;\n        &lt;action&gt;\n        &lt;category&gt;\n</code></pre>"},{"location":"LMI/T1/Documento_02/","title":"Ejercicio 2","text":""},{"location":"LMI/T1/Documento_02/#identificacio-dels-espais-de-noms-en-documents-androidmanifestxml-aquest-article-es-podria-combinar-amb-lanterior","title":"Identificaci\u00f3 dels espais de noms en documents (AndroidManifest.xml). Aquest article es podria combinar amb l'anterior.","text":"<p>Respuesta:</p> <p>El Namespace define la librer\u00eda de donde se cogen los tags xml que se usan en el documento xml. Los Namespace identifican de manera \u00fanica c\u00f3digo/librer\u00edas. Los Namespaces se usan para no tener colisiones entre los nobmres de los elmentos.</p> <p>La etiqueta xmlns:android permite el uso de etiquetas y atributos especificos de Android. Cada una de ellas deber\u00e1 empezar por android: que relaciona con los fundamentos del sistema Android. Como por ejemplos</p> <pre><code>android:name\nandroid:allowBackup\nandroid:icon\nandroid:label\nandroid:roundIcon\nandroid:supportsRtl\nandroid:theme\n</code></pre> <p>AndroidManifest.xml <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.example.myapp\"&gt;\n\n    &lt;!-* Permisos necessaris per a l'aplicaci\u00f3 --&gt;\n    &lt;uses-permission android:name=\"android.permission.INTERNET\" /&gt;\n    &lt;uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" /&gt;\n\n    &lt;!-* Configuraci\u00f3 de l'aplicaci\u00f3 --&gt;\n    &lt;application\n        android:allowBackup=\"true\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/AppTheme\"&gt;\n\n        &lt;!-* Activitat principal --&gt;\n        &lt;activity android:name=\".MainActivity\"&gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=\"android.intent.action.MAIN\" /&gt;\n                &lt;category android:name=\"android.intent.category.LAUNCHER\" /&gt;\n            &lt;/intent-filter&gt;\n        &lt;/activity&gt;\n    &lt;/application&gt;\n&lt;/manifest&gt;\n</code></pre></p>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/","title":"Ejercicio: Gesti\u00f3n y Visualizaci\u00f3n de Pizzas con JavaScript y Web Components","text":"<p>En este ejercicio, desarrollar\u00e1s una aplicaci\u00f3n web que permita obtener y visualizar una lista de pizzas desde una API REST. Para ello, deber\u00e1s crear una clase <code>Pizza</code> que represente el modelo de datos, con propiedades como <code>id</code>, <code>nom</code>, <code>desc</code>, <code>vegetariana</code>, <code>alergens</code>, <code>img</code> y <code>preu</code>. Esta clase servir\u00e1 para instanciar objetos <code>Pizza</code> con la informaci\u00f3n obtenida de la API. Adem\u00e1s, se permitir\u00e1 de manera opcional pasar un JSON est\u00e1tico con la informaci\u00f3n de las pizzas, en caso de que no se desee obtener los datos desde la API.</p> <p>A continuaci\u00f3n, implementar\u00e1s una funci\u00f3n <code>obtenerPizzas()</code> que devuelva una lista de objetos <code>Pizza</code> (equivalente a <code>List&lt;Pizza&gt;</code> en otros lenguajes como Java), obtenida mediante una solicitud <code>fetch</code> a la API, o cargada desde un JSON local en caso de usar la opci\u00f3n est\u00e1tica. Esta funci\u00f3n devolver\u00e1 una promesa que, al resolverse, proporcionar\u00e1 el listado de pizzas.</p> <p>El siguiente paso ser\u00e1 construir un Web Component <code>&lt;pizza-card&gt;</code> que reciba un objeto <code>Pizza</code> y lo muestre en forma de tarjeta, con su imagen, nombre, descripci\u00f3n, precio e indicaci\u00f3n de si es vegetariana. Finalmente, deber\u00e1s juntar todo el trabajo realizado, de modo que al cargar la p\u00e1gina, se obtengan las pizzas (de la API o del JSON) y se generen din\u00e1micamente las tarjetas <code>&lt;pizza-card&gt;</code> en el navegador. Este ejercicio te permitir\u00e1 practicar conceptos como Programaci\u00f3n Orientada a Objetos (POO) en JavaScript, uso de <code>fetch</code> y promesas, manipulaci\u00f3n del DOM, y creaci\u00f3n de componentes personalizados con Shadow DOM y Web Components.</p> <ol> <li>Clase pizza y (despues el fech) opcional: podemos pasar un json de la inf de la pizza, api</li> <li>List <code>&lt;Pizza&gt;</code> funcion Obtenerizzas</li> <li>webcomponent <code>&lt;pizza&gt;</code></li> <li>Juntar-ho tot</li> </ol>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#ficheros","title":"Ficheros","text":"index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Pizzer\u00eda WebComponent&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;\ud83c\udf55 Nuestras Pizzas \ud83c\udf55&lt;/h1&gt;\n\n    &lt;div id=\"pizzes-container\"&gt;\n        &lt;!-- Aqu\u00ed se insertar\u00e1n los &lt;pizza-card&gt; din\u00e1micamente --&gt;\n    &lt;/div&gt;\n\n    &lt;script type=\"module\" src=\"./main.js\"&gt;&lt;/script&gt; // Importante a\u00f1adir el atributo type=\"module\" para poder usar import/export\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> pizza.js<pre><code>export class Pizza {\n    constructor(pizzaData) {\n        this.id = pizzaData.id;\n        this.nom = pizzaData.nom;\n        this.desc = pizzaData.desc;\n        this.vegetariana = pizzaData.vegetariana;\n        this.alergens = pizzaData.alergens;\n        this.img = pizzaData.img;\n        this.preu = pizzaData.preu;\n    }\n}\n</code></pre>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#que-es-esta-clase-pizza","title":"\u00bfQu\u00e9 es esta clase <code>Pizza</code>?","text":"<p>Esta clase es como una \"plantilla\" o un \"molde\" para crear objetos que representen pizzas. Cada vez que creas una nueva pizza usando esta clase, est\u00e1s creando un objeto que tiene todas las caracter\u00edsticas (propiedades) de una pizza, como su nombre, descripci\u00f3n, si es vegetariana, etc.</p>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#parte-por-parte","title":"Parte por parte:","text":""},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#1-export-class-pizza","title":"1. <code>export class Pizza { ... }</code>","text":"<ul> <li>Aqu\u00ed estamos definiendo una clase llamada <code>Pizza</code>.</li> <li>La palabra <code>export</code> significa que esta clase se puede usar en otros archivos de JavaScript. Es como decir: \"Hey, esta clase est\u00e1 disponible para que otros la usen\".</li> </ul>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#2-constructorpizzadata","title":"2. <code>constructor(pizzaData) { ... }</code>","text":"<ul> <li>El <code>constructor</code> es un m\u00e9todo especial que se ejecuta autom\u00e1ticamente cuando creas una nueva instancia de la clase (es decir, cuando creas una nueva pizza).</li> <li>El <code>constructor</code> recibe un par\u00e1metro llamado <code>pizzaData</code>. Este par\u00e1metro es un objeto que contiene toda la informaci\u00f3n de la pizza (como su nombre, descripci\u00f3n, precio, etc.).</li> </ul>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#3-thisid-pizzadataid","title":"3. <code>this.id = pizzaData.id;</code>","text":"<ul> <li><code>this</code> se refiere a la instancia actual de la clase (es decir, la pizza que estamos creando).</li> <li><code>this.id</code> es una propiedad de la pizza que estamos creando. Aqu\u00ed le estamos asignando el valor de <code>pizzaData.id</code>.</li> <li>En otras palabras, estamos diciendo: \"El ID de esta pizza ser\u00e1 el mismo que el ID que viene en <code>pizzaData</code>\".</li> </ul>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#4-thisnom-pizzadatanom","title":"4. <code>this.nom = pizzaData.nom;</code>","text":"<ul> <li>Aqu\u00ed estamos asignando el nombre de la pizza (<code>nom</code>) usando el valor que viene en <code>pizzaData.nom</code>.</li> <li>Es como decir: \"El nombre de esta pizza ser\u00e1 el mismo que el nombre que viene en <code>pizzaData</code>\".</li> </ul>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#5-thisdesc-pizzadatadesc","title":"5. <code>this.desc = pizzaData.desc;</code>","text":"<ul> <li>Aqu\u00ed asignamos la descripci\u00f3n de la pizza (<code>desc</code>) usando el valor que viene en <code>pizzaData.desc</code>.</li> <li>Es como decir: \"La descripci\u00f3n de esta pizza ser\u00e1 la misma que la descripci\u00f3n que viene en <code>pizzaData</code>\".</li> </ul>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#6-thisvegetariana-pizzadatavegetariana","title":"6. <code>this.vegetariana = pizzaData.vegetariana;</code>","text":"<ul> <li>Aqu\u00ed asignamos si la pizza es vegetariana o no (<code>vegetariana</code>) usando el valor que viene en <code>pizzaData.vegetariana</code>.</li> <li>Es como decir: \"Esta pizza ser\u00e1 vegetariana o no, dependiendo de lo que venga en <code>pizzaData</code>\".</li> </ul>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#7-thisalergens-pizzadataalergens","title":"7. <code>this.alergens = pizzaData.alergens;</code>","text":"<ul> <li>Aqu\u00ed asignamos los al\u00e9rgenos de la pizza (<code>alergens</code>) usando el valor que viene en <code>pizzaData.alergens</code>.</li> <li>Es como decir: \"Los al\u00e9rgenos de esta pizza ser\u00e1n los mismos que los que vienen en <code>pizzaData</code>\".</li> </ul>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#8-thisimg-pizzadataimg","title":"8. <code>this.img = pizzaData.img;</code>","text":"<ul> <li>Aqu\u00ed asignamos la imagen de la pizza (<code>img</code>) usando el valor que viene en <code>pizzaData.img</code>.</li> <li>Es como decir: \"La imagen de esta pizza ser\u00e1 la misma que la que viene en <code>pizzaData</code>\".</li> </ul>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#9-thispreu-pizzadatapreu","title":"9. <code>this.preu = pizzaData.preu;</code>","text":"<ul> <li>Aqu\u00ed asignamos el precio de la pizza (<code>preu</code>) usando el valor que viene en <code>pizzaData.preu</code>.</li> <li>Es como decir: \"El precio de esta pizza ser\u00e1 el mismo que el precio que viene en <code>pizzaData</code>\".</li> </ul>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#como-se-usa-esta-clase","title":"\u00bfC\u00f3mo se usa esta clase?","text":"<p>Imagina que tienes un objeto con los datos de una pizza, como este:</p> <pre><code>const pizzaData = {\n    id: 1,\n    nom: \"Margarita\",\n    desc: \"Pizza cl\u00e1sica con tomate y mozzarella\",\n    vegetariana: true,\n    alergens: [\"gluten\", \"lactosa\"],\n    img: \"/images/margarita.jpg\",\n    preu: 8.99\n};\n</code></pre> <p>Para crear una nueva pizza usando la clase <code>Pizza</code>, har\u00edas lo siguiente:</p> <pre><code>const miPizza = new Pizza(pizzaData);\n</code></pre> <p>Ahora, <code>miPizza</code> es un objeto que tiene todas las propiedades de la pizza:</p> <pre><code>console.log(miPizza.nom); // \"Margarita\"\nconsole.log(miPizza.preu); // 8.99\nconsole.log(miPizza.vegetariana); // true\n</code></pre>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#resumen","title":"Resumen:","text":"<ul> <li>La clase <code>Pizza</code> es como un molde para crear objetos que representan pizzas.</li> <li>El <code>constructor</code> es el m\u00e9todo que se ejecuta cuando creas una nueva pizza.</li> <li>Cada propiedad de la pizza (como <code>id</code>, <code>nom</code>, <code>desc</code>, etc.) se asigna usando los datos que vienen en <code>pizzaData</code>.</li> <li>Esta clase es \u00fatil porque te permite crear muchas pizzas de manera f\u00e1cil y organizada.</li> </ul>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#ejemplo-practico","title":"Ejemplo pr\u00e1ctico:","text":"<p>Si la API te devuelve una lista de pizzas, puedes usar esta clase para crear un objeto por cada pizza. Por ejemplo:</p> <pre><code>const pizza1 = new Pizza({ id: 1, nom: \"Margarita\", desc: \"Cl\u00e1sica\", preu: 8.99 });\nconst pizza2 = new Pizza({ id: 2, nom: \"Pepperoni\", desc: \"Con pepperoni\", preu: 9.99 });\n</code></pre> <p>Ahora tienes dos objetos (<code>pizza1</code> y <code>pizza2</code>) que representan dos pizzas diferentes.</p> obtenerPizzas.js<pre><code>import { Pizza } from '../medelo/pizza.js';\n\nexport function obtenerPizzas() {\n    const url = 'https://pizza-rest-server-production.up.railway.app/api/pizzeria/pizzes'; // URL de la API\n\n    return fetch(url) // Hacemos la solicitud a la API\n        .then(response =&gt; response.json()) // Convertimos la respuesta a JSON\n        .then(data =&gt; {\n            console.log('Datos de la API:', data); // Mostramos los datos en la consola para depurar\n\n            const pizzas = []; // Creamos un array vac\u00edo para guardar las pizzas\n\n            // Recorremos cada pizza en los datos de la API\n            for (let i = 0; i &lt; data.records.length; i++) {\n                const pizzaData = data.records[i]; // Obtenemos los datos de cada pizza\n                const pizza = new Pizza(pizzaData); // Creamos una instancia de Pizza\n                pizzas.push(pizza); // A\u00f1adimos la pizza al array\n            }\n\n            return pizzas; // Devolvemos el array de pizzas\n        })\n        .catch(error =&gt; {\n            console.error('Error obteniendo las pizzas:', error); // Mostramos el error en la consola\n            return []; // Devolvemos un array vac\u00edo en caso de error\n        });\n}\n</code></pre>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#que-hace-esta-funcion-obtenerpizzas","title":"\u00bfQu\u00e9 hace esta funci\u00f3n <code>obtenerPizzas</code>?","text":"<p>Esta funci\u00f3n se encarga de obtener datos de pizzas desde una API (un servidor que proporciona informaci\u00f3n) y luego convertir esos datos en objetos de tipo <code>Pizza</code> que podemos usar en nuestro programa.</p>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#parte-por-parte_1","title":"Parte por parte","text":""},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#1-import-pizza-from-modelopizzajs","title":"1. <code>import { Pizza } from '../modelo/pizza.js';</code>","text":"<ul> <li>Aqu\u00ed estamos importando la clase <code>Pizza</code> desde otro archivo llamado <code>pizza.js</code>.</li> <li>Esto nos permite usar la clase <code>Pizza</code> en este archivo para crear objetos que representen pizzas.</li> <li>La ruta <code>'../modelo/pizza.js'</code> indica d\u00f3nde se encuentra el archivo <code>pizza.js</code>. (<code>../</code> significa \"subir un nivel\" en la estructura de carpetas).</li> </ul>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#2-export-function-obtenerpizzas","title":"2. <code>export function obtenerPizzas() { ... }</code>","text":"<ul> <li>Aqu\u00ed estamos definiendo una funci\u00f3n llamada <code>obtenerPizzas</code>.</li> <li>La palabra <code>export</code> significa que esta funci\u00f3n se puede usar en otros archivos de JavaScript. Es como decir: \"Esta funci\u00f3n est\u00e1 disponible para que otros la usen\".</li> </ul>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#3-const-url-httpspizza-rest-server-productionuprailwayappapipizzeriapizzes","title":"3. <code>const url = 'https://pizza-rest-server-production.up.railway.app/api/pizzeria/pizzes';</code>","text":"<ul> <li>Aqu\u00ed definimos una constante llamada <code>url</code> que contiene la direcci\u00f3n (URL) de la API desde la cual vamos a obtener los datos de las pizzas.</li> <li>Esta URL es como la \"direcci\u00f3n de la casa\" del servidor donde est\u00e1n guardadas las pizzas.</li> </ul>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#4-return-fetchurl","title":"4. <code>return fetch(url)</code>","text":"<ul> <li><code>fetch</code> es una funci\u00f3n de JavaScript que se usa para hacer solicitudes HTTP, es decir, para pedir datos a un servidor.</li> <li>Aqu\u00ed estamos haciendo una solicitud a la URL que definimos antes (<code>url</code>).</li> <li><code>fetch</code> devuelve una promesa, que es una forma de manejar operaciones as\u00edncronas (cosas que tardan un poco en completarse, como una solicitud a un servidor).</li> </ul>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#5-thenresponse-responsejson","title":"5. <code>.then(response =&gt; response.json())</code>","text":"<ul> <li>Cuando la solicitud a la API se completa, recibimos una respuesta (<code>response</code>).</li> <li>Esta respuesta no est\u00e1 en un formato que podamos usar directamente, as\u00ed que la convertimos a JSON (un formato de datos que JavaScript entiende) usando <code>response.json()</code>.</li> <li><code>response.json()</code> tambi\u00e9n devuelve una promesa, por lo que usamos otro <code>.then</code> para manejar los datos convertidos.</li> </ul>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#6-thendata","title":"6. <code>.then(data =&gt; { ... })</code>","text":"<ul> <li>Aqu\u00ed recibimos los datos de la API ya convertidos a JSON.</li> <li>Estos datos se guardan en la variable <code>data</code>.</li> <li>Ahora podemos trabajar con estos datos.</li> </ul>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#7-consolelogdatos-de-la-api-data","title":"7. <code>console.log('Datos de la API:', data);</code>","text":"<ul> <li>Esto es solo para depurar (es decir, para ver qu\u00e9 datos estamos recibiendo).</li> <li>Muestra los datos de la API en la consola del navegador. Es \u00fatil para asegurarnos de que todo est\u00e1 funcionando correctamente.</li> </ul>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#8-const-pizzas","title":"8. <code>const pizzas = [];</code>","text":"<ul> <li>Aqu\u00ed creamos un array vac\u00edo llamado <code>pizzas</code>.</li> <li>Este array lo usaremos para guardar todas las pizzas que creemos a partir de los datos de la API.</li> </ul>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#9-for-let-i-0-i-datarecordslength-i","title":"9. <code>for (let i = 0; i &lt; data.records.length; i++) { ... }</code>","text":"<ul> <li>Este es un bucle <code>for</code> que recorre cada pizza en los datos de la API.</li> <li><code>data.records</code> es un array que contiene todas las pizzas que nos devolvi\u00f3 la API.</li> <li><code>data.records.length</code> nos dice cu\u00e1ntas pizzas hay en total.</li> <li>El bucle se ejecuta una vez por cada pizza.</li> </ul>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#10-const-pizzadata-datarecordsi","title":"10. <code>const pizzaData = data.records[i];</code>","text":"<ul> <li>En cada iteraci\u00f3n del bucle, <code>data.records[i]</code> nos da los datos de una pizza espec\u00edfica.</li> <li>Guardamos esos datos en una variable llamada <code>pizzaData</code>.</li> </ul>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#11-const-pizza-new-pizzapizzadata","title":"11. <code>const pizza = new Pizza(pizzaData);</code>","text":"<ul> <li>Aqu\u00ed creamos una nueva instancia de la clase <code>Pizza</code> usando los datos de la pizza (<code>pizzaData</code>).</li> <li>Esto significa que estamos creando un objeto <code>Pizza</code> con todas las propiedades que definimos en la clase (como <code>id</code>, <code>nom</code>, <code>desc</code>, etc.).</li> </ul>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#12-pizzaspushpizza","title":"12. <code>pizzas.push(pizza);</code>","text":"<ul> <li>Aqu\u00ed a\u00f1adimos la pizza que acabamos de crear al array <code>pizzas</code>.</li> <li><code>push</code> es un m\u00e9todo que a\u00f1ade un elemento al final de un array.</li> </ul>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#13-return-pizzas","title":"13. <code>return pizzas;</code>","text":"<ul> <li>Una vez que hemos creado todas las pizzas y las hemos a\u00f1adido al array <code>pizzas</code>, devolvemos ese array.</li> <li>Esto significa que cuando llamemos a la funci\u00f3n <code>obtenerPizzas</code>, obtendremos un array con todas las pizzas.</li> </ul>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#14-catcherror","title":"14. <code>.catch(error =&gt; { ... })</code>","text":"<ul> <li>Si algo sale mal (por ejemplo, si la API no responde o hay un error de red), el c\u00f3digo dentro de <code>.catch</code> se ejecutar\u00e1.</li> <li>Aqu\u00ed mostramos el error en la consola usando <code>console.error</code>.</li> </ul>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#15-return","title":"15. <code>return [];</code>","text":"<ul> <li>Si hay un error, devolvemos un array vac\u00edo <code>[]</code>.</li> <li>Esto evita que el programa se rompa y nos permite manejar el error de manera elegante.</li> </ul>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#como-se-usa-esta-funcion","title":"\u00bfC\u00f3mo se usa esta funci\u00f3n?","text":"<p>Puedes llamar a la funci\u00f3n <code>obtenerPizzas</code> desde otro archivo y trabajar con las pizzas que devuelve. Por ejemplo:</p> <pre><code>obtenerPizzas().then(pizzas =&gt; {\n    console.log('Pizzas obtenidas:', pizzas); // Aqu\u00ed tienes el array de pizzas\n    // Puedes hacer algo con las pizzas, como mostrarlas en la p\u00e1gina\n});\n</code></pre>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#resumen_1","title":"Resumen","text":"<ol> <li>La funci\u00f3n <code>obtenerPizzas</code> hace una solicitud a una API para obtener datos de pizzas.</li> <li>Convierte esos datos en objetos de tipo <code>Pizza</code>.</li> <li>Devuelve un array con todas las pizzas.</li> <li>Si hay un error, devuelve un array vac\u00edo y muestra el error en la consola.</li> </ol>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#ejemplo-de-flujo","title":"Ejemplo de flujo:","text":"<ol> <li>Hacemos una solicitud a la API.</li> <li>La API nos devuelve datos en formato JSON.</li> <li>Convertimos esos datos en objetos <code>Pizza</code>.</li> <li>Devolvemos un array con todas las pizzas.</li> </ol> pizzaCard.js<pre><code>export class PizzaCard extends HTMLElement {\n    constructor() {\n        super();\n        this.attachShadow({ mode: 'open' });\n    }\n\n    set pizza(pizza) {\n        console.log('Pizza recibida:', pizza);\n        const defaultImg = 'https://static.vecteezy.com/system/resources/previews/007/404/906/non_2x/slice-of-pizza-cartoon-cartoon-illustration-cartoon-clipart-free-vector.jpg';\n\n        const pizzaImage = pizza.img\n            ? `https://pizza-rest-server-production.up.railway.app${pizza.img}`\n            : defaultImg;\n\n        const template = document.createElement('template');\n        template.innerHTML = `\n            &lt;style&gt;\n                :host {\n                    display: block;\n                    margin: 10px;\n                    border: 1px solid #ddd;\n                    border-radius: 10px;\n                    padding: 15px;\n                    width: 250px;\n                    background-color: #f9f9f9;\n                    font-family: Arial, sans-serif;\n                    box-shadow: 2px 2px 10px rgba(0,0,0,0.1);\n                }\n\n                :host .pizza-card {\n                    display: flex;\n                    flex-direction: column;\n                    align-items: center;\n                    text-align: center;\n                }\n\n                :host .preu {\n                    background-color: #ffdd00;\n                    padding: 5px;\n                    border-radius: 5px;\n                    border: 1px solid #efcd00;\n                    margin: 2px;\n                    display: inline-block;\n                }\n\n                :host img {\n                    max-width: 100%;\n                    border-radius: 8px;\n                    height: auto;\n                }\n\n                :host .vegetariana {\n                    color: green;\n                    font-weight: bold;\n                }\n\n                :host .no-vegetariana {\n                    color: red;\n                    font-weight: bold;\n                }\n            &lt;/style&gt;\n            &lt;div class=\"pizza-card\"&gt;\n                &lt;h3&gt;${pizza.nom}&lt;/h3&gt;\n                &lt;img src=\"${pizzaImage}\" alt=\"${pizza.nom}\"&gt;\n                &lt;p&gt;${pizza.desc}&lt;/p&gt;\n                &lt;span class=\"preu\"&gt;${pizza.preu} \u20ac&lt;/span&gt;\n                &lt;p class=\"${pizza.vegetariana ? 'vegetariana' : 'no-vegetariana'}\"&gt;\n                    ${pizza.vegetariana ? '\ud83c\udf43 Vegetariana' : '\ud83c\udf56 No Vegetariana'}\n                &lt;/p&gt;\n            &lt;/div&gt;\n        `;\n\n        this.shadowRoot.innerHTML = '';\n        this.shadowRoot.appendChild(template.content.cloneNode(true));\n    }\n}\n\ncustomElements.define('pizza-card', PizzaCard);\n</code></pre>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#que-es-esta-clase-pizzacard","title":"\u00bfQu\u00e9 es esta clase <code>PizzaCard</code>?","text":"<p>Esta clase es un Web Component, es decir, un componente personalizado de HTML que puedes usar en tu p\u00e1gina web como si fuera una etiqueta HTML normal (por ejemplo, <code>&lt;pizza-card&gt;</code>). Este componente se encarga de mostrar la informaci\u00f3n de una pizza de manera visual, como una tarjeta.</p>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#parte-por-parte_2","title":"Parte por parte","text":""},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#1-export-class-pizzacard-extends-htmlelement","title":"1. <code>export class PizzaCard extends HTMLElement { ... }</code>","text":"<ul> <li>Aqu\u00ed estamos definiendo una clase llamada <code>PizzaCard</code>.</li> <li>La palabra <code>export</code> significa que esta clase se puede usar en otros archivos de JavaScript.</li> <li><code>extends HTMLElement</code> indica que esta clase es un componente personalizado de HTML. Hereda todas las propiedades y m\u00e9todos de <code>HTMLElement</code>, que es la clase base para todos los elementos HTML.</li> </ul>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#2-constructor","title":"2. <code>constructor() { ... }</code>","text":"<ul> <li>El <code>constructor</code> es un m\u00e9todo especial que se ejecuta autom\u00e1ticamente cuando creas una nueva instancia de la clase (es decir, cuando usas <code>&lt;pizza-card&gt;</code> en tu HTML).</li> <li><code>super()</code> llama al constructor de la clase padre (<code>HTMLElement</code>). Esto es necesario para que el componente funcione correctamente.</li> <li><code>this.attachShadow({ mode: 'open' });</code> crea un Shadow DOM para el componente. El Shadow DOM es como un \"DOM privado\" que permite encapsular el estilo y la estructura del componente, evitando que se mezcle con el resto de la p\u00e1gina.</li> </ul>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#3-set-pizzapizza","title":"3. <code>set pizza(pizza) { ... }</code>","text":"<ul> <li>Este es un setter, un m\u00e9todo especial que se ejecuta cuando le asignas un valor a la propiedad <code>pizza</code> del componente.</li> <li>Aqu\u00ed, <code>pizza</code> es un objeto que contiene los datos de una pizza (como su nombre, descripci\u00f3n, precio, etc.).</li> <li>Este m\u00e9todo se encarga de tomar esos datos y mostrarlos en la tarjeta.</li> </ul>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#4-consolelogpizza-recibida-pizza","title":"4. <code>console.log('Pizza recibida:', pizza);</code>","text":"<ul> <li>Esto es solo para depurar. Muestra los datos de la pizza en la consola del navegador, para que puedas ver qu\u00e9 informaci\u00f3n est\u00e1 llegando al componente.</li> </ul>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#5-const-defaultimg","title":"5. <code>const defaultImg = '...';</code>","text":"<ul> <li>Aqu\u00ed definimos una imagen por defecto que se usar\u00e1 si la pizza no tiene una imagen (<code>pizza.img</code>).</li> </ul>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#6-const-pizzaimage-pizzaimg-defaultimg","title":"6. <code>const pizzaImage = pizza.img ? ... : defaultImg;</code>","text":"<ul> <li>Esto es un operador ternario. Verifica si la pizza tiene una imagen (<code>pizza.img</code>).</li> <li>Si tiene una imagen, la usa. Si no, usa la imagen por defecto (<code>defaultImg</code>).</li> </ul>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#7-const-template-documentcreateelementtemplate","title":"7. <code>const template = document.createElement('template');</code>","text":"<ul> <li>Aqu\u00ed creamos un elemento <code>&lt;template&gt;</code>. Los templates son una forma de definir fragmentos de HTML que no se renderizan inmediatamente, pero que podemos clonar y usar m\u00e1s tarde.</li> </ul>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#8-templateinnerhtml","title":"8. <code>template.innerHTML = \\</code>...`;`","text":"<ul> <li>Aqu\u00ed definimos el contenido del template usando template literals (las comillas invertidas <code>`</code>).</li> <li>Dentro del template, definimos la estructura HTML y los estilos CSS que se usar\u00e1n para mostrar la tarjeta de la pizza.</li> </ul>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#9-estilos-css-dentro-del-template","title":"9. Estilos CSS dentro del template","text":"<ul> <li>Los estilos est\u00e1n definidos dentro de un bloque <code>&lt;style&gt;</code>.</li> <li><code>:host</code> se refiere al propio componente <code>&lt;pizza-card&gt;</code>. Aqu\u00ed le damos estilos como m\u00e1rgenes, bordes, colores, etc.</li> <li><code>.pizza-card</code>, <code>.preu</code>, <code>img</code>, <code>.vegetariana</code>, y <code>.no-vegetariana</code> son clases que usamos para estilizar diferentes partes de la tarjeta.</li> </ul>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#10-contenido-html-dentro-del-template","title":"10. Contenido HTML dentro del template","text":"<ul> <li>Aqu\u00ed definimos la estructura de la tarjeta usando los datos de la pizza (<code>pizza.nom</code>, <code>pizza.desc</code>, <code>pizza.preu</code>, etc.).</li> <li>Por ejemplo, <code>${pizza.nom}</code> inserta el nombre de la pizza en el HTML.</li> </ul>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#11-thisshadowrootinnerhtml","title":"11. <code>this.shadowRoot.innerHTML = '';</code>","text":"<ul> <li>Aqu\u00ed limpiamos el contenido actual del Shadow DOM para evitar duplicados.</li> </ul>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#12-thisshadowrootappendchildtemplatecontentclonenodetrue","title":"12. <code>this.shadowRoot.appendChild(template.content.cloneNode(true));</code>","text":"<ul> <li>Aqu\u00ed clonamos el contenido del template y lo a\u00f1adimos al Shadow DOM del componente.</li> <li>Esto hace que el contenido del template se renderice en la p\u00e1gina.</li> </ul>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#13-customelementsdefinepizza-card-pizzacard","title":"13. <code>customElements.define('pizza-card', PizzaCard);</code>","text":"<ul> <li>Aqu\u00ed registramos el componente personalizado en el navegador.</li> <li>Esto permite usar la etiqueta <code>&lt;pizza-card&gt;</code> en el HTML.</li> </ul>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#resumen_2","title":"Resumen","text":"<ol> <li>\u00bfQu\u00e9 hace esta clase?</li> <li>Crea un componente personalizado (<code>&lt;pizza-card&gt;</code>) que muestra una tarjeta con la informaci\u00f3n de una pizza.</li> <li>Usa el Shadow DOM para encapsular el estilo y la estructura del componente.</li> <li> <p>Recibe los datos de la pizza a trav\u00e9s de una propiedad (<code>pizza</code>) y los muestra en la tarjeta.</p> </li> <li> <p>\u00bfC\u00f3mo funciona?</p> </li> <li> <p>Cuando creas una instancia de <code>&lt;pizza-card&gt;</code> y le asignas una pizza, el componente toma los datos y los muestra en una tarjeta con estilos y estructura definidos.</p> </li> <li> <p>\u00bfPara qu\u00e9 sirve?</p> </li> <li>Para mostrar pizzas de manera visual en una p\u00e1gina web, de forma modular y reutilizable.</li> </ol>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#ejemplo-de-flujo_1","title":"Ejemplo de flujo","text":"<ol> <li>Creas un elemento <code>&lt;pizza-card&gt;</code> en tu HTML o JavaScript.</li> <li>Le asignas una pizza usando la propiedad <code>pizza</code>:</li> </ol> <pre><code>const pizzaCard = document.createElement('pizza-card');\npizzaCard.pizza = {\n    nom: \"Margarita\",\n    desc: \"Pizza cl\u00e1sica con tomate y mozzarella\",\n    vegetariana: true,\n    preu: 8.99,\n    img: \"/images/margarita.jpg\"\n};\ndocument.body.appendChild(pizzaCard);\n</code></pre> <ol> <li>El componente toma los datos de la pizza y los muestra en una tarjeta con estilos y estructura definidos.</li> </ol>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#preguntas-para-reflexionar","title":"Preguntas para reflexionar:","text":"<ol> <li>\u00bfQu\u00e9 es el Shadow DOM y por qu\u00e9 se usa en este componente?</li> <li> <p>El Shadow DOM es un \"DOM privado\" que encapsula el estilo y la estructura del componente, evitando que se mezcle con el resto de la p\u00e1gina.</p> </li> <li> <p>\u00bfQu\u00e9 hace el m\u00e9todo <code>set pizza(pizza)</code>?</p> </li> <li> <p>Toma los datos de una pizza y los usa para actualizar el contenido del componente.</p> </li> <li> <p>\u00bfPor qu\u00e9 se usa un <code>&lt;template&gt;</code> en este componente?</p> </li> <li> <p>Para definir la estructura y los estilos del componente de manera reutilizable y eficiente.</p> </li> <li> <p>\u00bfQu\u00e9 pasa si una pizza no tiene imagen?</p> </li> <li> <p>El componente usa una imagen por defecto (<code>defaultImg</code>).</p> </li> <li> <p>\u00bfC\u00f3mo se registra el componente personalizado en el navegador?</p> </li> <li>Usando <code>customElements.define('pizza-card', PizzaCard);</code>.</li> </ol>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#preguntas-para-ti","title":"Preguntas para ti:","text":"<ol> <li>\u00bfQu\u00e9 pasar\u00eda si no us\u00e1ramos <code>this.attachShadow({ mode: 'open' });</code> en el constructor?</li> <li>\u00bfC\u00f3mo podr\u00edas modificar el componente para que muestre m\u00e1s informaci\u00f3n, como los al\u00e9rgenos?</li> <li>\u00bfQu\u00e9 ventajas tiene usar un Web Component como <code>&lt;pizza-card&gt;</code> en lugar de crear la tarjeta directamente en el HTML?</li> </ol>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#mainjs","title":"main.js","text":"main.js<pre><code>import { obtenerPizzas } from './servicio/obtenerPizzas.js';\nimport \"./vista/PizzaCard.js\";\n\nwindow.addEventListener('DOMContentLoaded', () =&gt; {\n    const container = document.getElementById('pizzes-container');\n\n    obtenerPizzas().then(pizzas =&gt; {\n        console.log('N\u00famero de pizzas:', pizzas.length);\n        pizzas.forEach(pizza =&gt; {\n            console.log('Creando tarjeta para:', pizza.nom);\n            const pizzaCard = document.createElement('pizza-card');\n            pizzaCard.pizza = pizza;\n            container.appendChild(pizzaCard);\n        });\n    });\n});\n</code></pre> <p>\u00a1Vamos a desglosar esta parte del c\u00f3digo con detalle! Esta secci\u00f3n es la que se encarga de obtener las pizzas desde la API y mostrarlas en la p\u00e1gina usando el componente <code>&lt;pizza-card&gt;</code>. Te explicar\u00e9 paso a paso qu\u00e9 hace cada l\u00ednea, y al final te dar\u00e9 un resumen, un ejemplo de flujo y algunas preguntas para que reflexiones si has entendido bien. \ud83d\ude0a</p>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#que-hace-este-codigo","title":"\u00bfQu\u00e9 hace este c\u00f3digo?","text":"<p>Este c\u00f3digo se ejecuta cuando la p\u00e1gina ha terminado de cargarse (<code>DOMContentLoaded</code>). Su funci\u00f3n es:</p> <ol> <li>Obtener las pizzas desde una API.</li> <li>Crear una tarjeta (<code>&lt;pizza-card&gt;</code>) por cada pizza.</li> <li>A\u00f1adir las tarjetas al contenedor en la p\u00e1gina.</li> </ol>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#parte-por-parte_3","title":"Parte por parte","text":""},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#1-import-obtenerpizzas-from-servicioobtenerpizzasjs","title":"1. <code>import { obtenerPizzas } from './servicio/obtenerPizzas.js';</code>","text":"<ul> <li>Aqu\u00ed estamos importando la funci\u00f3n <code>obtenerPizzas</code> desde el archivo <code>obtenerPizzas.js</code>.</li> <li>Esta funci\u00f3n se encarga de hacer una solicitud a la API y devolver un array de pizzas.</li> </ul>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#2-import-vistapizzacardjs","title":"2. <code>import \"./vista/PizzaCard.js\";</code>","text":"<ul> <li>Aqu\u00ed estamos importando el componente <code>PizzaCard</code> desde el archivo <code>PizzaCard.js</code>.</li> <li>Esto es necesario para poder usar la etiqueta <code>&lt;pizza-card&gt;</code> en nuestro c\u00f3digo.</li> </ul>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#3-windowaddeventlistenerdomcontentloaded","title":"3. <code>window.addEventListener('DOMContentLoaded', () =&gt; { ... });</code>","text":"<ul> <li>Aqu\u00ed estamos a\u00f1adiendo un \"escuchador de eventos\" que se activa cuando la p\u00e1gina ha terminado de cargarse (<code>DOMContentLoaded</code>).</li> <li>Esto asegura que el c\u00f3digo dentro de la funci\u00f3n no se ejecute hasta que el HTML est\u00e9 completamente cargado y listo.</li> </ul>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#4-const-container-documentgetelementbyidpizzes-container","title":"4. <code>const container = document.getElementById('pizzes-container');</code>","text":"<ul> <li>Aqu\u00ed obtenemos el contenedor donde se a\u00f1adir\u00e1n las tarjetas de pizza.</li> <li><code>pizzes-container</code> es el ID del elemento HTML que actuar\u00e1 como contenedor.</li> </ul>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#5-obtenerpizzasthenpizzas","title":"5. <code>obtenerPizzas().then(pizzas =&gt; { ... });</code>","text":"<ul> <li>Aqu\u00ed llamamos a la funci\u00f3n <code>obtenerPizzas</code>, que devuelve una promesa.</li> <li>Cuando la promesa se resuelve (es decir, cuando la API devuelve los datos), ejecutamos el c\u00f3digo dentro de <code>.then</code>.</li> <li>El par\u00e1metro <code>pizzas</code> es un array con todas las pizzas que obtuvimos de la API.</li> </ul>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#6-consolelognumero-de-pizzas-pizzaslength","title":"6. <code>console.log('N\u00famero de pizzas:', pizzas.length);</code>","text":"<ul> <li>Esto es solo para depurar. Muestra en la consola cu\u00e1ntas pizzas se obtuvieron de la API.</li> </ul>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#7-pizzasforeachpizza","title":"7. <code>pizzas.forEach(pizza =&gt; { ... });</code>","text":"<ul> <li>Aqu\u00ed recorremos cada pizza en el array <code>pizzas</code>.</li> <li>Por cada pizza, ejecutamos el c\u00f3digo dentro del bucle.</li> </ul>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#8-consolelogcreando-tarjeta-para-pizzanom","title":"8. <code>console.log('Creando tarjeta para:', pizza.nom);</code>","text":"<ul> <li>Esto es solo para depurar. Muestra en la consola el nombre de la pizza que se est\u00e1 procesando.</li> </ul>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#9-const-pizzacard-documentcreateelementpizza-card","title":"9. <code>const pizzaCard = document.createElement('pizza-card');</code>","text":"<ul> <li>Aqu\u00ed creamos un nuevo elemento <code>&lt;pizza-card&gt;</code> usando <code>document.createElement</code>.</li> <li>Este es el componente personalizado que definimos en <code>PizzaCard.js</code>.</li> </ul>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#10-pizzacardpizza-pizza","title":"10. <code>pizzaCard.pizza = pizza;</code>","text":"<ul> <li>Aqu\u00ed asignamos la pizza al componente <code>&lt;pizza-card&gt;</code>.</li> <li>Esto activa el <code>set pizza(pizza)</code> en la clase <code>PizzaCard</code>, que actualiza el contenido de la tarjeta con los datos de la pizza.</li> </ul>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#11-containerappendchildpizzacard","title":"11. <code>container.appendChild(pizzaCard);</code>","text":"<ul> <li>Aqu\u00ed a\u00f1adimos la tarjeta de pizza al contenedor en la p\u00e1gina.</li> <li>Esto hace que la tarjeta se muestre en el lugar correcto.</li> </ul>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#resumen_3","title":"Resumen","text":"<ol> <li>\u00bfQu\u00e9 hace este c\u00f3digo?</li> <li>Obtiene las pizzas desde una API.</li> <li>Crea una tarjeta (<code>&lt;pizza-card&gt;</code>) por cada pizza.</li> <li> <p>A\u00f1ade las tarjetas al contenedor en la p\u00e1gina.</p> </li> <li> <p>\u00bfC\u00f3mo funciona?</p> </li> <li>Cuando la p\u00e1gina termina de cargarse, se llama a la funci\u00f3n <code>obtenerPizzas</code>.</li> <li> <p>Por cada pizza, se crea un componente <code>&lt;pizza-card&gt;</code> y se a\u00f1ade al contenedor.</p> </li> <li> <p>\u00bfPara qu\u00e9 sirve?</p> </li> <li>Para mostrar din\u00e1micamente las pizzas en la p\u00e1gina, usando un componente personalizado.</li> </ol>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#ejemplo-de-flujo_2","title":"Ejemplo de flujo","text":"<ol> <li>La p\u00e1gina termina de cargarse.</li> <li>Se llama a <code>obtenerPizzas</code>, que hace una solicitud a la API.</li> <li>La API devuelve un array de pizzas.</li> <li>Por cada pizza:</li> <li>Se crea un <code>&lt;pizza-card&gt;</code>.</li> <li>Se asignan los datos de la pizza al componente.</li> <li>Se a\u00f1ade la tarjeta al contenedor.</li> <li>Las tarjetas se muestran en la p\u00e1gina.</li> </ol>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#preguntas-para-reflexionar_1","title":"Preguntas para reflexionar","text":"<ol> <li>\u00bfQu\u00e9 pasa si la API no devuelve ninguna pizza?</li> <li> <p>El array <code>pizzas</code> estar\u00eda vac\u00edo, y no se crear\u00edan tarjetas.</p> </li> <li> <p>\u00bfPor qu\u00e9 es importante usar <code>window.addEventListener('DOMContentLoaded', ...)</code>?</p> </li> <li> <p>Para asegurarnos de que el c\u00f3digo no se ejecute hasta que el HTML est\u00e9 completamente cargado.</p> </li> <li> <p>\u00bfQu\u00e9 pasar\u00eda si el contenedor (<code>pizzes-container</code>) no existe en el HTML?</p> </li> <li> <p><code>container</code> ser\u00eda <code>null</code>, y el c\u00f3digo dar\u00eda un error al intentar a\u00f1adir las tarjetas.</p> </li> <li> <p>\u00bfC\u00f3mo podr\u00edas modificar este c\u00f3digo para mostrar un mensaje si no hay pizzas?</p> </li> <li> <p>Podr\u00edas a\u00f1adir una condici\u00f3n para verificar si <code>pizzas.length</code> es 0 y mostrar un mensaje en el contenedor.</p> </li> <li> <p>\u00bfQu\u00e9 ventajas tiene usar un componente personalizado como <code>&lt;pizza-card&gt;</code>?</p> </li> <li>Permite reutilizar el c\u00f3digo y mantener la l\u00f3gica y el estilo encapsulados.</li> </ol>"},{"location":"LMI/T3/MVC-pizza/actividad-MVC-pizza/#preguntas-para-ti_1","title":"Preguntas para ti","text":"<ol> <li>\u00bfQu\u00e9 pasar\u00eda si la API tarda mucho en responder? \u00bfC\u00f3mo podr\u00edas mejorar la experiencia del usuario?</li> <li>\u00bfC\u00f3mo podr\u00edas modificar este c\u00f3digo para que las tarjetas se muestren en un orden espec\u00edfico (por ejemplo, por precio)?</li> <li>\u00bfQu\u00e9 har\u00edas si quisieras a\u00f1adir un bot\u00f3n para recargar las pizzas sin recargar la p\u00e1gina?</li> </ol>"}]}